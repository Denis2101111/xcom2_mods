[XComGame.XGAIBehavior]
; Modifying this may or may not break the Chosen.
+AoEProfiles=( Profile=IdealGrenadeProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnObjectiveFire=false, bFailOnFriendlyFire=1, MinTargets=3)
+m_arrMoveWeightProfile=(Profile=MWP_ChosenFlanking, fCoverWeight=5.0f, fDistanceWeight=5.0f, fFlankingWeight=7.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0f, fAllyVisWeight=3.0f, fCloseModifier=1.0f, fFarModifier=3.0f)
+m_arrMoveWeightProfile=(Profile=MWP_ChosenDefensive, fCoverWeight=5.0f, fDistanceWeight=3.0f, fFlankingWeight=0.0f, fEnemyVisWeight=-1.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=4.0f, fCloseModifier=0.1f, fFarModifier=7.0f, MinimumTileDist=8.0f)
[XComGame.X2AIBTBehaviorTree]

; Generic Chosen AI bits

; Extract Behavior Modifications

-Behaviors=(BehaviorName=TryChosenExtractAbility, NodeType=Sequence, Child[0]=CanKidnapOrExtract, Child[1]=ExtractNotDisabled, Child[2]=SelectKidnapOrExtract)
+Behaviors=(BehaviorName=TryChosenExtractAbility, NodeType=Sequence, Child[0]=CanKidnapOrExtract, Child[1]=ExtractNotDisabled, Child[2]=DidNotUsePartingSilk, Child[3]=SelectKidnapOrExtract)

+Behaviors=(BehaviorName=OverrideIdealRange-15, NodeType=Action, Param[0]=15) ; So the Chosen heavily prefer safe distances when flanking

; Chosen Retaliation Behavior - Chosen will kill Civilians and Resistance Militia - Not enabled by default, due to bug concerns

+Behaviors=(BehaviorName=ActivatedChosenBeginTerrorSometimes, NodeType=Sequence, \\
	Child[0]=IsMissionOfType-ChosenRetaliation, \\
	Child[1]=ChosenIsActivated, \\
	Child[2]=ActivatedChosenBeginTerrorChance)

+Behaviors=(BehaviorName=EngagedChosenLastUnitTerrorRarely, NodeType=Sequence, \\
	Child[0]=IsMissionOfType-ChosenRetaliation, \\
	Child[1]=IsLastAIUnit, \\
	Child[2]=ChosenIsEngaged, \\
	Child[3]=EngagedChosenBeginTerrorChance)

+Behaviors=(BehaviorName=ActivatedChosenBeginTerrorChance, NodeType=RandFilter, Child[0]=ActivatedChosenBeginTerror, Param[0]=30)
+Behaviors=(BehaviorName=EngagedChosenBeginTerrorChance, NodeType=RandFilter, Child[0]=EngagedChosenBeginTerror, Param[0]=10)

+Behaviors=(BehaviorName=ActivatedChosenBeginTerror, NodeType=Sequence, \\
	Child[0]=ChosenShootMilitiaRetaliation, \\
	Child[1]=ChosenShootCivilianRetaliation)

+Behaviors=(BehaviorName=EngagedChosenBeginTerror, NodeType=Sequence, \\
	Child[0]=ChosenShootCivilianRetaliation, \\
	Child[1]=ChosenShootMilitiaRetaliation)

; Civilian Branch

+Behaviors=(BehaviorName=ChosenShootCivilianRetaliation, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-StandardShot, \\
	Child[1]=SelectTargetForCivilianExecution, \\
	Child[2]=SelectAbility-StandardShot)

+Behaviors=(BehaviorName=SelectTargetForCivilianExecution, NodeType=Sequence, \\
	Child[0]=SetTargetStack-StandardShot, \\
	Child[1]=SelectBestTargetForCivilianExecution, \\
	Child[2]=HasValidTarget-StandardShot)

+Behaviors=(BehaviorName=SelectBestTargetForCivilianExecution, NodeType=RepeatUntilFail, \\
	Child[0]=EvaluateTargetForCivilianExecution)

+Behaviors=(BehaviorName=EvaluateTargetForCivilianExecution, NodeType=Sequence, \\
	Child[0]=SetNextTarget, \\
	Child[1]=TargetEvaluationForCivilianExecutionSuccessor, \\
	Child[2]=UpdateBestTarget)

+Behaviors=(BehaviorName=TargetEvaluationForCivilianExecutionSuccessor, NodeType=Successor, \\
	Child[0]=TargetEvaluationForCivilianExecution)

+Behaviors=(BehaviorName=TargetEvaluationForCivilianExecution, NodeType=Sequence, \\
	Child[0]=TargetScoreChosenRetaliationCivilian, \\
	Child[1]=TargetScoreFlanking, \\
	Child[2]=TargetScoreHitChance, \\
	Child[3]=AddSmallRandomTargetScore)

; Militia Branch

+Behaviors=(BehaviorName=ChosenShootMilitiaRetaliation, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-StandardShot, \\
	Child[1]=SelectTargetForMilitiaExecution, \\
	Child[2]=SelectAbility-StandardShot)

+Behaviors=(BehaviorName=SelectTargetForMilitiaExecution, NodeType=Sequence, \\
	Child[0]=SetTargetStack-StandardShot, \\
	Child[1]=SelectBestTargetForMilitiaExecution, \\
	Child[2]=HasValidTarget-StandardShot)

+Behaviors=(BehaviorName=SelectBestTargetForMilitiaExecution, NodeType=RepeatUntilFail, \\
	Child[0]=EvaluateTargetForMilitiaExecution)

+Behaviors=(BehaviorName=EvaluateTargetForMilitiaExecution, NodeType=Sequence, \\
	Child[0]=SetNextTarget, \\
	Child[1]=TargetEvaluationForMilitiaExecutionSuccessor, \\
	Child[2]=UpdateBestTarget)

+Behaviors=(BehaviorName=TargetEvaluationForMilitiaExecutionSuccessor, NodeType=Successor, \\
	Child[0]=TargetEvaluationForCivilianExecution)

+Behaviors=(BehaviorName=TargetEvaluationForMilitiaExecution, NodeType=Sequence, \\
	Child[0]=TargetScoreChosenRetaliationMilitia, \\
	Child[1]=TargetScoreFlanking, \\
	Child[2]=TargetScoreHitChance, \\
	Child[3]=AddSmallRandomTargetScore)

; Generic Chosen Combat Behavior

+Behaviors=(BehaviorName=TryMoveThenGrenadeWhenIdeal, NodeType=Selector, Child[0]=TryMoveForGrenadeWhenIdeal, Child[1]=TryGrenadeWhenIdeal)
+Behaviors=(BehaviorName=TryMoveForGrenadeWhenIdeal, NodeType=Sequence, \\
	Child[0]=ChosenSafeToMove, \\
	Child[1]=IsAbilityReady-ThrowGrenade, \\
	Child[2]=FindPotentialAoETargets-IdealGrenadeProfile, \\
	Child[3]=MoveStandardIfFirstAbility-Grenade, \\
	Child[4]=SSSetPreselectedAbility-IdealGrenadeProfile)

+Behaviors=(BehaviorName=SSSetPreselectedAbility-IdealGrenadeProfile, NodeType=Successor, Child[0]=SetPreselectedAbility-IdealGrenadeProfile)
+Behaviors=(BehaviorName=SetPreselectedAbility-IdealGrenadeProfile, NodeType=Action)

+Behaviors=(BehaviorName=TryGrenadeWhenIdeal, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-ThrowGrenade, \\
	Child[1]=FindPotentialAoETargets-IdealGrenadeProfile, \\
	Child[2]=SelectAoETarget-IdealGrenadeProfile, \\
	Child[3]=SelectAbility-ThrowGrenade)

+Behaviors=(BehaviorName=FindPotentialAoETargets-IdealGrenadeProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-IdealGrenadeProfile, NodeType=Action)

+Behaviors=(BehaviorName=MaybeTryGrenade, NodeType=RandFilter, Child[0]=TryGrenade, Param[0]=50)
+Behaviors=(BehaviorName=SometimesTryGrenade, NodeType=RandFilter, Child[0]=TryGrenade, Param[0]=30)

; Custom Chosen Targeting Behavior. Makes the Chosen greatly prefer good shots. Compacted for Scrolling's sake.
; Given the very stealthy nature of Reapers, and how important Specialists are as healers, they are by Default Priority Targets.
; Additionally, targeting is weighted against prioritizing Untouchable or Parrying targets if other good targets are available.
; XCOM is prioritized over things like The Lost unless there are no good shots on XCOM.

; Chance to Hit >90

+Behaviors=(BehaviorName=ShootIfSSCOver90, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForChosenSSOver90, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForChosenSSOver90, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=SelectBestTargetForChosenSSOver90, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=SelectBestTargetForChosenSSOver90, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetForChosenSSOver90)
+Behaviors=(BehaviorName=EvaluateTargetForChosenSSOver90, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetEvaluationForChosenSSOver90Successor, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver90Successor, NodeType=Successor, Child[0]=TargetEvaluationForChosenSSOver90)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver90, NodeType=Sequence, Child[0]=ChosenStandardShotsChancesAbove90, Child[1]=TargetIsEnemy, Child[2]=TargetScoreUntouchable, Child[3]=TargetScoreParrying, Child[4]=TargetScoreReaperClass, Child[5]=TargetScoreSpecialistClass, Child[6]=TargetScoreHitChance, Child[7]=TargetScoreHealth, Child[8]=TargetScoreMarked, Child[9]=TargetScoreFlanking, Child[10]=TargetScoreXCOMPreference, Child[11]=TargetScoreChosenCanKill)

; Chance to Hit >80

+Behaviors=(BehaviorName=ShootIfSSCOver80, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForChosenSSOver80, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForChosenSSOver80, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=SelectBestTargetForChosenSSOver80, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=SelectBestTargetForChosenSSOver80, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetForChosenSSOver80)
+Behaviors=(BehaviorName=EvaluateTargetForChosenSSOver80, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetEvaluationForChosenSSOver80Successor, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver80Successor, NodeType=Successor, Child[0]=TargetEvaluationForChosenSSOver80)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver80, NodeType=Sequence, Child[0]=ChosenStandardShotsChancesAbove80, Child[1]=TargetIsEnemy, Child[2]=TargetScoreUntouchable, Child[3]=TargetScoreParrying, Child[4]=TargetScoreReaperClass, Child[5]=TargetScoreSpecialistClass, Child[6]=TargetScoreHitChance, Child[7]=TargetScoreHealth, Child[8]=TargetScoreMarked, Child[9]=TargetScoreFlanking, Child[10]=TargetScoreXCOMPreference, Child[11]=TargetScoreChosenCanKill)

; Chance to Hit >70

+Behaviors=(BehaviorName=ShootIfSSCOver70, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForChosenSSOver70, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForChosenSSOver70, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=SelectBestTargetForChosenSSOver70, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=SelectBestTargetForChosenSSOver70, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetForChosenSSOver70)
+Behaviors=(BehaviorName=EvaluateTargetForChosenSSOver70, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetEvaluationForChosenSSOver70Successor, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver70Successor, NodeType=Successor, Child[0]=TargetEvaluationForChosenSSOver70)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver70, NodeType=Sequence, Child[0]=ChosenStandardShotsChancesAbove70, Child[1]=TargetIsEnemy, Child[2]=TargetScoreUntouchable, Child[3]=TargetScoreParrying, Child[4]=TargetScoreReaperClass, Child[5]=TargetScoreSpecialistClass, Child[6]=TargetScoreHitChance, Child[7]=TargetScoreHealth, Child[8]=TargetScoreMarked, Child[9]=TargetScoreFlanking, Child[10]=TargetScoreXCOMPreference, Child[11]=TargetScoreChosenCanKill)

; Chance to Hit >60

+Behaviors=(BehaviorName=ShootIfSSCOver60, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForChosenSSOver60, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForChosenSSOver60, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=SelectBestTargetForChosenSSOver60, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=SelectBestTargetForChosenSSOver60, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetForChosenSSOver60)
+Behaviors=(BehaviorName=EvaluateTargetForChosenSSOver60, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetEvaluationForChosenSSOver60Successor, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver60Successor, NodeType=Successor, Child[0]=TargetEvaluationForChosenSSOver60)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver60, NodeType=Sequence, Child[0]=ChosenStandardShotsChancesAbove60, Child[1]=TargetIsEnemy, Child[2]=TargetScoreUntouchable, Child[3]=TargetScoreParrying, Child[4]=TargetScoreReaperClass, Child[5]=TargetScoreSpecialistClass, Child[6]=TargetScoreHitChance, Child[7]=TargetScoreHealth, Child[8]=TargetScoreMarked, Child[9]=TargetScoreFlanking, Child[10]=TargetScoreXCOMPreference, Child[11]=TargetScoreChosenCanKill)

; Chance to Hit >50

+Behaviors=(BehaviorName=ShootIfSSCOver50, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForChosenSSOver50, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForChosenSSOver50, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=SelectBestTargetForChosenSSOver50, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=SelectBestTargetForChosenSSOver50, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetForChosenSSOver50)
+Behaviors=(BehaviorName=EvaluateTargetForChosenSSOver50, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetEvaluationForChosenSSOver50Successor, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver50Successor, NodeType=Successor, Child[0]=TargetEvaluationForChosenSSOver50)
+Behaviors=(BehaviorName=TargetEvaluationForChosenSSOver50, NodeType=Sequence, Child[0]=ChosenStandardShotsChancesAbove50, Child[1]=TargetIsEnemy, Child[2]=TargetScoreUntouchable, Child[3]=TargetScoreParrying, Child[4]=TargetScoreReaperClass, Child[5]=TargetScoreSpecialistClass, Child[6]=TargetScoreHitChance, Child[7]=TargetScoreHealth, Child[8]=TargetScoreMarked, Child[9]=TargetScoreFlanking, Child[10]=TargetScoreXCOMPreference, Child[11]=TargetScoreChosenCanKill)


; Targeting Dependancies

+Behaviors=(BehaviorName=TargetScoreUntouchable, NodeType=Selector, Child[0]=ScoreTargetIfUntouchable, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetIfUntouchable, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Untouchable, Child[1]=AddToTargetScore_-70)

+Behaviors=(BehaviorName=TargetScoreParrying, NodeType=Selector, Child[0]=ScoreTargetIfParrying, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetIfParrying, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Parry, Child[1]=AddToTargetScore_-70)

+Behaviors=(BehaviorName=TargetScoreChosenCanKill, NodeType=Selector, Child[0]=ScoreTargetIfChosenCanKill, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetIfChosenCanKill, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=AddToTargetScore_70)

+Behaviors=(BehaviorName=TargetScoreReaperClass, NodeType=Selector, Child[0]=ScoreTargetIfReaperClass, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetIfReaperClass, NodeType=Sequence, Child[0]=TargetIsSoldierClass-Reaper, Child[1]=AddToTargetScore_50)

+Behaviors=(BehaviorName=TargetScoreSpecialistClass, NodeType=Selector, Child[0]=ScoreTargetIfSpecialistClass, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetIfSpecialistClass, NodeType=Sequence, Child[0]=TargetIsSoldierClass-Specialist, Child[1]=AddToTargetScore_15)


+Behaviors=(BehaviorName=TargetScoreXCOMPreference, NodeType=Selector, Child[0]=ScoreTargetIfXCOMTarget, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetIfXCOMTarget, NodeType=Sequence, Child[0]=IsTeam-eTeam_XCom, Child[1]=AddToTargetScore_20)

+Behaviors=(BehaviorName=TargetAffectedByEffect-Untouchable, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Parry, NodeType=Condition)

; Overwatch Special Handler

+Behaviors=(BehaviorName=ChosenShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ChosenConsiderTakingOverwatch, Child[1]=ShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ChosenConsiderTakingOverwatch, NodeType=Selector, Child[0]=TryTwoTurnAttackSupport, Child[1]=ChosenTakingOverwatchConsideration, Child[2]=ConsiderTakingOverwatchVIP, Child[3]=ConsiderTakingOverwatchEvac)
+Behaviors=(BehaviorName=ChosenTakingOverwatchConsideration, NodeType=Sequence, Child[0]=AllShotPercentagesBelow50, Child[1]=ChosenFilterOverwatch50)
+Behaviors=(BehaviorName=ChosenFilterOverwatch50, NodeType=RandFilter, Child[0]=TryOverwatch, Param[0]=50)

; Mixed behavior stuff

+Behaviors=(BehaviorName=ChosenDoIfFlankedAndDidNotMove, NodeType=Selector, \\
	Child[0]=CheckIfChosenInDangerCannotMove, \\
	Child[1]=CheckIfChosenInDanger, \\
	Child[2]=ChosenMoveDefensiveFlanked)

+Behaviors=(BehaviorName=CheckIfChosenInDangerCannotMove, NodeType=Sequence, Child[0]=IsFlanked, Child[1]=HasMoreThanOneOverwatcher, Child[2]=ChosenNihilus)
+Behaviors=(BehaviorName=CheckIfChosenInDanger, NodeType=Sequence, Child[0]=IsFlanked, Child[1]=IsBloodied, Child[2]=ChosenNihilus)

; Chosen Nihilus: If Flanked and there are multiple Overwatchers, or if at 50% HP or lower, the Chosen will attempt to maximize their damage output instead of moving when flanked.
+Behaviors=(BehaviorName=ChosenNihilus, NodeType=Selector, \\
	Child[0]=AlwaysTryDimensionalRift, \\
	Child[1]=NeedsReload, \\
	Child[2]=TryNullLance, \\
	Child[3]=TryWarlockPsychoShock, \\
	Child[4]=TryHunterAbilityLethalTempo, \\
	Child[5]=TryHunterAbilitySadism, \\
	Child[6]=TryHunterAbilityShowdown, \\
	Child[7]=TryAssassinAbilityExpose, \\
	Child[8]=TryAssassinAbilityDeadlyCadence, \\
	Child[9]=TryHunterAbilityHeartseeker, \\
	Child[10]=TryGrenade, \\
	Child[11]=ShootIfAvailable)

+Behaviors=(BehaviorName=ChosenMoveDefensiveIfWoundedAndSafe, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=ChosenMoveDefensive)
+Behaviors=(BehaviorName=ChosenMoveFlankingIfSafe, NodeType=Sequence, Child[0]=ChosenSafeToMove, Child[1]=DidntJustMove, Child[2]=IsAbilityAvailable-StandardMove, Child[3]=FindChosenFlankingDestination, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=FindChosenFlankingDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToFlanking, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-15, Child[4]=FindDestinationWithLoS-MWP_ChosenFlanking)
+Behaviors=(BehaviorName=FindChosenDefensiveDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToUnflanked, Child[2]=OverrideIdealRange-15, Child[3]=FindDestinationWithLoS-MWP_ChosenDefensive)
+Behaviors=(BehaviorName=FindChosenDefensiveHighCoverDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToUnflanked, Child[2]=RestrictToHighCover, Child[3]=OverrideIdealRange-15, Child[4]=FindDestinationWithLoS-MWP_ChosenDefensive)

+Behaviors=(BehaviorName=FindDestinationWithLoS-MWP_ChosenFlanking, NodeType=Action)
+Behaviors=(BehaviorName=FindDestinationWithLoS-MWP_ChosenDefensive, NodeType=Action)

+Behaviors=(BehaviorName=ChosenMoveDefensiveFlanked, NodeType=Sequence, Child[0]=IsFlanked, Child[1]=ChosenMoveDefensive)
+Behaviors=(BehaviorName=ChosenMoveDefensive, NodeType=Sequence, Child[0]=ChosenSafeToMove, Child[1]=ChosenMoveDefensiveSelector)
+Behaviors=(BehaviorName=ChosenMoveDefensiveSelector, NodeType=Selector, Child[0]=ChosenMoveDefensiveHighCover, Child[1]=ChosenMoveDefensiveAnyCover)
+Behaviors=(BehaviorName=ChosenMoveDefensiveHighCover, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=FindChosenDefensiveHighCoverDestination, Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ChosenMoveDefensiveAnyCover, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=FindChosenDefensiveDestination, Child[2]=SelectAbility-StandardMove)

; Chosen AI AIM Requirements for using the new abilities

+Behaviors=(BehaviorName=ChosenStandardShotsChancesAbove50, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="50")
+Behaviors=(BehaviorName=ChosenStandardShotsChancesBelow50, NodeType=Inverter, Child[0]=ChosenStandardShotsChancesAbove50)
+Behaviors=(BehaviorName=ChosenStandardShotsChancesAbove60, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="60")
+Behaviors=(BehaviorName=ChosenStandardShotsChancesBelow60, NodeType=Inverter, Child[0]=ChosenStandardShotsChancesAbove60)
+Behaviors=(BehaviorName=ChosenStandardShotsChancesAbove70, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="70")
+Behaviors=(BehaviorName=ChosenStandardShotsChancesBelow70, NodeType=Inverter, Child[0]=ChosenStandardShotsChancesAbove70)
+Behaviors=(BehaviorName=ChosenStandardShotsChancesAbove80, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="80")
+Behaviors=(BehaviorName=ChosenStandardShotsChancesBelow80, NodeType=Inverter, Child[0]=ChosenStandardShotsChancesAbove80)
+Behaviors=(BehaviorName=ChosenStandardShotsChancesAbove90, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="90")
+Behaviors=(BehaviorName=ChosenStandardShotsChancesBelow90, NodeType=Inverter, Child[0]=ChosenStandardShotsChancesAbove90)

; Chosen Health Requirement for abilities

+Behaviors=(BehaviorName=CriticalChosenHealthLevel, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]="<=", Param[2]="20%")

; To fix a strange AI bug. - Do Not Alter this.

-Behaviors=(BehaviorName=ChosenUnactivated, NodeType=Sequence, Child[0]=ChosenIsUnactivated, Child[1]=GenericGreenMovement)
+Behaviors=(BehaviorName=ChosenUnactivated, NodeType=Failer, Child[0]=ChosenIsUnactivated)

+Behaviors=(BehaviorName=ChosenIsNotActivated, NodeType=StatCondition, Param[0]=UnitValue-ChosenActivatedStateUnitValue, Param[1]="==", Param[2]=0)