[XComGame.XGAIBehavior]
-m_arrMoveWeightProfile=(Profile=MWP_BendingReed, fCoverWeight=0.5f, fDistanceWeight=0.5f, fFlankingWeight=0.0f, fEnemyVisWeight=-1.5f, fEnemyVisWeightPeak1=0.7f, fAllyVisWeight=0, fCloseModifier=0.1f, fFarModifier=2.5f, MinimumTileDist=6.0f)
+m_arrMoveWeightProfile=(Profile=MWP_BendingReed, fCoverWeight=1.0f, fDistanceWeight=0.5f, fFlankingWeight=0.0f, fEnemyVisWeight=-2.5f, fEnemyVisWeightPeak1=0.7f, fAllyVisWeight=4.0f, fCloseModifier=0.1f, fFarModifier=3.0f, MinimumTileDist=10.0f)

[XComGame.X2AIBTBehaviorTree]

+EquivalentAbilities=( KeyName=NullLance, EquivalentAbilityName[0]=AssassinAbility_Decimate )

; --- Note: The Assassin's AI is messy and not neatly organized, but it works.
; --- Special Chosen Assassin Dependacies

-Behaviors=(BehaviorName=DoVanishingWindScamper, NodeType=Sequence, Child[0]=IsAbilityAvailable-VanishingWind_Scamper, Child[1]=SelectAbility-VanishingWind_Scamper, Child[2]=SSSetAssassinCycle1IfUnset)
+Behaviors=(BehaviorName=DoVanishingWindScamper, NodeType=Sequence, Child[0]=IsAbilityAvailable-VanishingWind_Scamper, Child[1]=SelectAbility-VanishingWind_Scamper)
+Behaviors=(BehaviorName=DidNotUsePartingSilk, NodeType=Inverter, Child[0]=WasLastAbility-PartingSilk)
+Behaviors=(BehaviorName=DidNotUseDancingShadows, NodeType=Inverter, Child[0]=WasLastAbility-AssassinAbility_FromTheDark)
-Behaviors=(BehaviorName=FindBendingReedDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=OverrideIdealRange-13, Child[2]=UseDashMovement, Child[3]=RestrictToUnflanked, Child[4]=FindBendingReedDestRestrictedOrNot)
+Behaviors=(BehaviorName=FindBendingReedDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=OverrideIdealRange-15, Child[2]=UseDashMovement, Child[3]=RestrictToUnflanked, Child[4]=FindBendingReedDestRestrictedOrNot)
; --- Removing Vanilla Assassin ---

-Behaviors=(BehaviorName=ScamperRoot_ChosenAssassin, NodeType=Selector, Child[0]=FFSetAssassinCycle1IfNotSet, Child[1]=PostVanishingWindMovement, Child[2]=DoVanishingWindScamper, Child[3]=GenericScamperRoot)
-Behaviors=(BehaviorName=DoVanishingWindScamper, NodeType=Sequence, Child[0]=IsAbilityAvailable-VanishingWind_Scamper, Child[1]=SelectAbility-VanishingWind_Scamper, Child[2]=SSSetAssassinCycle1IfUnset)
+Behaviors=(BehaviorName=DoVanishingWindScamper, NodeType=Sequence, Child[0]=IsAbilityAvailable-VanishingWind_Scamper, Child[1]=SelectAbility-VanishingWind_Scamper)

-Behaviors=(BehaviorName="ChosenAssassin::CharacterRoot", NodeType=Selector, Child[0]=ChosenUnactivated, Child[1]=ChosenActivated, Child[2]=ChosenEngaged, Child[3]=SkipMove)
-Behaviors=(BehaviorName="ChosenAssassin::ChosenActivated", NodeType=Selector, Child[0]=SelectPreselectedAbility, Child[1]=PostBendingReedSkip, Child[2]=StealthAssassinBranch, Child[3]=DoVanishingWindMapwide, Child[4]=VanishingWindMove, Child[5]=MoveAdvanceToCoverUnsafe, Child[6]=SkipMove)
-Behaviors=(BehaviorName="ChosenAssassin::ChosenEngaged", NodeType=Selector, Child[0]=PostBendingReedSkip, Child[1]=StealthAssassinBranch, Child[2]=VisibleAssassinBranch, Child[3]=TryShootOrReload, Child[4]=TryOverwatch, Child[5]=SkipMove)
-Behaviors=(BehaviorName=StealthAssassinBranch, NodeType=Sequence, Child[0]=AffectedByEffect-VanishingWind, Child[1]=SelectFromStealthAssassinOptions)
-Behaviors=(BehaviorName=VisibleAssassinBranch, NodeType=Sequence, Child[0]=NotAffectedByVanishingWind, Child[1]=CycleVisibleAssassinOptions)
-Behaviors=(BehaviorName=SelectFromStealthAssassinOptions, NodeType=Selector, \\
	Child[0]=TryPartingSilkConditionally, \\
	Child[1]=PostVanishingWindMovement, \\
	Child[2]=AdvanceCoverIfNoEnemiesVisible, \\
	Child[3]=NoHarborWaveTargetOption, \\
	Child[4]=StealthOverwatchHandlerOption, \\
	Child[5]=AdvanceCoverDashMove, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=HuntEnemyUnsafe ) 
-Behaviors=(BehaviorName=CycleVisibleAssassinOptions, NodeType=Selector, \\
	Child[0]=OverwatchHandlerShootOverwatcherOption, \\
	Child[1]=TryChosenSummon, \\
	Child[2]=AssassinCycle1Branch, \\
	Child[3]=AssassinCycle2Branch, \\
	Child[4]=AssassinCycle3Branch, \\
	Child[5]=SelectFromVisibleAssassinOptions)
-Behaviors=(BehaviorName=SelectFromVisibleAssassinOptions, NodeType=Selector, \\
	Child[0]=OverwatchHandlerShootOverwatcherOption,\\
	Child[1]=AssassinBendingReedMovement, \\
	Child[2]=TryVanishingWind, \\
	Child[3]=HarborWaveAndMountainMistOptions, \\
	Child[4]=PartingSilkPriorityOption, \\
	Child[5]=HarborWaveOnlyOption, \\
	Child[6]=MountainMistOnlyOption, \\
	Child[7]=NoHarborWaveTargetOption, \\
	Child[8]=OverwatchHandlerBackupOption, \\
	Child[9]=SelectFromStealthAssassinOptions)
-Behaviors=(BehaviorName=SelectBestTargetForPartingSilk, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTarget)

; --- Chosen Root --- A Harder War Assassin Behavior

+Behaviors=(BehaviorName="ChosenAssassin::CharacterRoot", NodeType=Selector, Child[0]=ChosenIsNotActivated, Child[1]=ChosenActivated, Child[2]=ChosenEngaged, Child[3]=SkipMove)
+Behaviors=(BehaviorName="ChosenAssassin::ChosenActivated", NodeType=Selector, Child[0]=PostBendingReedSkip, Child[1]=ChosenAssassinActivatedLastAction, Child[2]=ChosenAssassinActivatedFirstAction)
+Behaviors=(BehaviorName="ChosenAssassin::ChosenEngaged", NodeType=Selector, Child[0]=PostBendingReedSkip, Child[1]=ChosenAssassinEngagedLastAction, Child[2]=ChosenAssassinEngagedFirstAction)

+Behaviors=(BehaviorName=ScamperRoot_ChosenAssassin, NodeType=Selector, Child[0]=PostVanishingWindMovement, Child[1]=DoVanishingWindScamper, Child[2]=GenericScamperRoot)

; Activated
+Behaviors=(BehaviorName=ChosenAssassinNotEngaged, NodeType=Inverter, Child[0]=ChosenIsEngaged)
+Behaviors=(BehaviorName=ChosenAssassinActivatedFirstAction, NodeType=Sequence, Child[0]=ChosenAssassinActivatedFirstActionSelector)
+Behaviors=(BehaviorName=ChosenAssassinActivatedLastAction, NodeType=Sequence,  Child[0]=IsLastActionPoint, Child[1]=ChosenAssassinActivatedLastActionSelector)

+Behaviors=(BehaviorName=ChosenAssassinActivatedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryPartingSilkConditionally, \\
	Child[1]=AssassinActivatedVanishingWindBegin, \\
	Child[2]=AdvanceCoverIfNoEnemiesVisible, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=HuntEnemyUnsafe, \\
	Child[5]=SkipMove)

+Behaviors=(BehaviorName=ChosenAssassinActivatedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryPartingSilkConditionally, \\
	Child[1]=AdvanceCoverIfNoEnemiesVisible, \\
	Child[2]=AdvanceCoverDashMove, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=HuntEnemyUnsafe, \\
	Child[5]=SkipMove)

+Behaviors=(BehaviorName=AssassinActivatedVanishingWindBegin, NodeType=Sequence, \\
	Child[0]=NotAffectedByVanishingWind, \\
	Child[1]=IsAbilityAvailable-VanishingWind, \\
	Child[2]=SelectAbility-VanishingWind)

; Engaged Branch

+Behaviors=(BehaviorName=ChosenAssassinEngagedFirstAction, NodeType=Sequence, Child[0]=AssassinEngagedFirstActionSelector)
+Behaviors=(BehaviorName=ChosenAssassinEngagedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AssassinEngagedLastActionSelector)

; First Action, Prioritize Grenade when Ideal, 50% Chance to use Parting Silk if not stealthed.

+Behaviors=(BehaviorName=AssassinEngagedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TrySummonIfNotStealthed, \\
	Child[1]=PostVanishingWindMoveFlanking, \\
	Child[2]=PostDancingShadowsMoveFlanking, \\
	Child[3]=ChosenDoIfFlankedAndDidNotMove, \\
	Child[4]=TryMoveThenGrenadeWhenIdeal, \\
	Child[5]=MaybeTryPartingSilk, \\
	Child[6]=NeedsReload, \\
	Child[7]=TryAssassinAbilityExpose, \\
	Child[8]=TryNullLance, \\
	Child[9]=TryDeadlyCadenceOver80, \\
	Child[10]=TryDancingShadowsOver80, \\
	Child[11]=ShootIfSSCOver80, \\
	Child[12]=MaybeTryVanishingWind, \\
	Child[13]=ShootIfSSCOver70, \\
	Child[14]=ShootIfSSCOver60, \\
	Child[15]=ShootIfSSCOver50, \\
	Child[16]=ChosenMoveDefensiveIfWoundedAndSafe, \\
	Child[17]=ChosenMoveFlankingIfSafe, \\
	Child[18]=TryHarborwaveAHW, \\
	Child[19]=ChosenShootOrReloadOrOverwatch, \\
	Child[20]=HuntEnemyWithCover, \\
	Child[21]=SkipMove)

; Last Action, Gun or Grenade or Harborwave if not stealthed.

+Behaviors=(BehaviorName=AssassinEngagedLastActionSelector, NodeType=Selector, \\
	Child[0]=PostVanishingWindMoveDefensive, \\
	Child[1]=PostDancingShadowsMoveDefensive, \\
	Child[2]=AssassinBendingReedBehavior, \\
	Child[3]=TryVWRevealConditionally, \\
	Child[4]=TryAssassinAbilityExpose, \\
	Child[5]=TryDeadlyCadenceOver80, \\
	Child[6]=TryNullLance, \\
	Child[7]=TryDancingShadowsOver80, \\
	Child[8]=ShootIfSSCOver80, \\
	Child[9]=MaybeTryGrenade, \\
	Child[10]=ShootIfSSCOver70, \\
	Child[11]=TryAssassinAbilityDeadlyCadence, \\
	Child[12]=TryAssassinAbilityDancingShadows, \\
	Child[13]=TryHarborwaveAHW, \\
	Child[14]=ShootIfSSCOver60, \\
	Child[15]=ShootIfSSCOver50, \\
	Child[16]=TryVanishingWindWhenNotFlanked, \\
	Child[17]=ChosenShootOrReloadOrOverwatch, \\
	Child[18]=HuntEnemyWithCover, \\
	Child[19]=SkipMove)

; Modified and new Vanilla Ability AI

+Behaviors=(BehaviorName=AssassinBendingReedBehavior, NodeType=Sequence, Child[0]=WasLastAbility-PartingSilk, Child[1]=TryBendingReedMovementAHW)

+Behaviors=(BehaviorName=TryBendingReedMovementAHW, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ChosenSafeToMove, Child[2]=FindAssassBendingReedDestination, Child[3]=DisableGreenAlertMovement, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindAssassBendingReedDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=OverrideIdealRange-20, Child[2]=UseDashMovement, Child[3]=RestrictToUnflanked, Child[4]=FindBendingReedDestRestrictedOrNot)
+Behaviors=(BehaviorName=OverrideIdealRange-20, NodeType=Action, Param[0]=20)
; Makes the Assassin really run far after Parting Silk
+Behaviors=(BehaviorName=PostVanishingWindMoveDefensive, NodeType=Sequence, Child[0]=WasLastAbility-VanishingWind, Child[1]=DidntJustMove, Child[2]=ChosenMoveDefensive)
+Behaviors=(BehaviorName=PostVanishingWindMoveFlanking, NodeType=Sequence, Child[0]=WasLastAbility-VanishingWind, Child[1]=DidntJustMove, Child[2]=IsAbilityAvailable-StandardMove, Child[3]=FindChosenFlankingDestination, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=PostDancingShadowsMoveDefensive, NodeType=Sequence, Child[0]=WasLastAbility-AssassinAbility_FromTheDark, Child[1]=DidntJustMove, Child[2]=ChosenMoveDefensive)
+Behaviors=(BehaviorName=PostDancingShadowsMoveFlanking, NodeType=Sequence, Child[0]=WasLastAbility-AssassinAbility_FromTheDark, Child[1]=DidntJustMove, Child[2]=IsAbilityAvailable-StandardMove, Child[3]=FindChosenFlankingDestination, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=TrySummonIfNotStealthed, NodeType=Sequence, Child[0]=ChosenIsEngaged, Child[1]=NotAffectedByVanishingWind, Child[2]=TryChosenSummon)

+Behaviors=(BehaviorName=MaybeTryPartingSilk, NodeType=RandFilter, Child[0]=TryPartingSilkConditionally, Param[0]=50)
+Behaviors=(BehaviorName=MaybeTryVanishingWind, NodeType=RandFilter, Child[0]=TryVanishingWindWhenNotFlanked, Param[0]=30)
+Behaviors=(BehaviorName=SelectBestTargetForPartingSilk, NodeType=RepeatUntilFail, Child[0]=EvaluatePartingSilkTargets)

+Behaviors=(BehaviorName=TryVanishingWindConditionally, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=TryVanishingWindWhenNotFlanked)
+Behaviors=(BehaviorName=SometimesTryVanishingWindConditionally, NodeType=RandFilter, Child[0]=TryVanishingWindWhenNotFlanked, Param[0]=20)
+Behaviors=(BehaviorName=TryVWRevealConditionally, NodeType=Sequence, Child[0]=IsAbilityAvailable-VanishingWindReveal, Child[1]=AffectedByEffect-VanishingWind, Child[2]=DidntJustUseVanishingWind, Child[3]=AnyLivingEnemyVisible, Child[4]=SelectAbility-VanishingWindReveal)

+Behaviors=(BehaviorName=WasLastAbility-AssassinAbility_FromTheDark, NodeType=Condition)

+Behaviors=(BehaviorName=EvaluatePartingSilkTargets, NodeType=Sequence, \\
	Child[0]=SetNextTarget, \\
	Child[1]=AssassinPartingSilkTargetEvaluation, \\
	Child[2]=UpdateBestTarget)

+Behaviors=(BehaviorName=AssassinPartingSilkTargetEvaluation, NodeType=Sequence, \\
	Child[0]=TargetScoreSkirmisherClass, \\
	Child[1]=TargetScoreReaperClass, \\
	Child[2]=TargetScoreSpecialistClass, \\
	Child[3]=TargetScoreXCOMSharpshooterClass, \\
	Child[4]=TargetScoreUntouchable, \\
	Child[5]=TargetScoreParrying, \\
	Child[6]=TargetScoreHealth, \\
	Child[7]=TargetScoreMarked, \\
	Child[8]=AddSmallRandomTargetScore, \\
	Child[9]=TargetScoreChosenCanKill)

+Behaviors=(BehaviorName=TryVanishingWindWhenNotFlanked, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-VanishingWind, \\
	Child[1]=NotFlanked, \\
	Child[2]=NotAffectedByVanishingWind, \\
	Child[3]=SelectAbility-VanishingWind)

+Behaviors=(BehaviorName=LowHPHarborWavePriority, NodeType=Sequence, \\
	Child[0]=IsBloodied, \\
	Child[1]=NotAffectedByVanishingWind, \\
	Child[2]=FirstTurnMoveForPriorityHarborWave, \\
	Child[3]=TryHarborWaveAHW)

+Behaviors=(BehaviorName=TryHarborWaveAHW, NodeType=Sequence, \\
	Child[0]=NotAffectedByVanishingWind, \\
	Child[1]=SelectTargetForHarborWave, \\
	Child[2]=SelectAbility-HarborWave)

; A Harder War Unique Assassin Abilities

; Expose

+Behaviors=(BehaviorName=TryAssassinAbilityExpose, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-AssassinAbility_Expose, \\
	Child[1]=NotAffectedByVanishingWind, \\
	Child[2]=SelectAssassinExposeTarget, \\
	Child[3]=SelectAbility-AssassinAbility_Expose)

+Behaviors=(BehaviorName=SelectAssassinExposeTarget, NodeType=Sequence, Child[0]=SetTargetStack-AssassinAbility_Expose, Child[1]=SelectBestTargetForAssassinExpose, Child[2]=HasValidTarget-AssassinAbility_Expose)
+Behaviors=(BehaviorName=IsAbilityAvailable-AssassinAbility_Expose, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-AssassinAbility_Expose, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AssassinAbility_Expose, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-AssassinAbility_Expose, NodeType=Condition)

+Behaviors=(BehaviorName=SelectBestTargetForAssassinExpose, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetForAssassinExpose)
+Behaviors=(BehaviorName=EvaluateTargetForAssassinExpose, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetEvaluationForAssassinExposeSuccessor, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetEvaluationForAssassinExposeSuccessor, NodeType=Successor, Child[0]=TargetEvaluationForAssassinExpose)

+Behaviors=(BehaviorName=TargetEvaluationForAssassinExpose, NodeType=Sequence, \\
	Child[0]=TargetIsEnemy, \\
	Child[1]=TargetScoreUntouchable, \\
	Child[2]=ExposeTargetScoreParrying, \\
	Child[3]=TargetScoreReaperClass, \\
	Child[4]=TargetScoreSpecialistClass, \\
	Child[5]=ExposeTargetScoreOverwatching, \\
	Child[6]=ExposeTargetScoreSuppressing, \\
	Child[7]=TargetScoreHitChance, \\
	Child[8]=TargetScoreHealth,\\
	Child[9]=TargetScoreMarked, \\
	Child[10]=TargetScoreByScaledDistance-1, \\
	Child[11]=TargetScoreXCOMPreference)

+Behaviors=(BehaviorName=ExposeTargetScoreParrying, NodeType=Selector, Child[0]=ScoreExposeTargetIfParrying, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreExposeTargetIfParrying, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Parry, Child[1]=AddToTargetScore_800)

+Behaviors=(BehaviorName=ExposeTargetScoreOverwatching, NodeType=Selector, Child[0]=ScoreExposeTargetIfOverwatching, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreExposeTargetIfOverwatching, NodeType=Sequence, Child[0]=TargetIsOverwatching, Child[1]=AddToTargetScore_400)

+Behaviors=(BehaviorName=ExposeTargetScoreSuppressing, NodeType=Selector, Child[0]=ScoreExposeTargetIfSuppressing, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreExposeTargetIfSuppressing, NodeType=Sequence, Child[0]=TargetIsApplyingEffect-Suppression, Child[1]=AddToTargetScore_500)


; Dancing Shadows

+Behaviors=(BehaviorName=TryAssassinAbilityDancingShadows, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-AssassinAbility_DancingShadows, \\
	Child[1]=NotFlanked, \\
	Child[2]=NotAffectedByVanishingWind, \\
	Child[3]=SelectDancingShadowsTarget, \\
	Child[4]=SelectAbility-AssassinAbility_DancingShadows)

+Behaviors=(BehaviorName=TryDancingShadowsOver80, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-AssassinAbility_DancingShadows, \\
	Child[1]=NotFlanked, \\
	Child[2]=NotAffectedByVanishingWind, \\
	Child[3]=SelectDancingShadowsTargetOver80, \\
	Child[4]=SelectAbility-AssassinAbility_DancingShadows)

+Behaviors=(BehaviorName=SelectDancingShadowsTargetOver80, NodeType=Sequence, Child[0]=SetTargetStack-AssassinAbility_DancingShadows, Child[1]=SelectBestTargetForChosenSSOver80, Child[2]=HasValidTarget-AssassinAbility_DancingShadows)

+Behaviors=(BehaviorName=SelectDancingShadowsTarget, NodeType=Sequence, Child[0]=SetTargetStack-AssassinAbility_DancingShadows, Child[1]=SelectBestTargetForChosenSSOver60, Child[2]=HasValidTarget-AssassinAbility_DancingShadows)
+Behaviors=(BehaviorName=IsAbilityAvailable-AssassinAbility_DancingShadows, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-AssassinAbility_DancingShadows, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AssassinAbility_DancingShadows, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-AssassinAbility_DancingShadows, NodeType=Condition)

; Deadly Cadence

+Behaviors=(BehaviorName=TryAssassinAbilityDeadlyCadence, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-AssassinAbility_DeadlyCadence, \\
	Child[1]=NotAffectedByVanishingWind, \\
	Child[2]=SelectDeadlyCadenceTarget, \\
	Child[3]=SelectAbility-AssassinAbility_DeadlyCadence)

+Behaviors=(BehaviorName=TryDeadlyCadenceOver80, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-AssassinAbility_DeadlyCadence, \\
	Child[1]=NotAffectedByVanishingWind, \\
	Child[2]=SelectDeadlyCadenceTargetOver80, \\
	Child[3]=SelectAbility-AssassinAbility_DeadlyCadence)

+Behaviors=(BehaviorName=SelectDeadlyCadenceTargetOver80, NodeType=Sequence, Child[0]=SetTargetStack-AssassinAbility_DeadlyCadence, Child[1]=SelectBestTargetForChosenSSOver80, Child[2]=HasValidTarget-AssassinAbility_DeadlyCadence)

+Behaviors=(BehaviorName=SelectDeadlyCadenceTarget, NodeType=Sequence, Child[0]=SetTargetStack-AssassinAbility_DeadlyCadence, Child[1]=SelectBestTargetForChosenSSOver60, Child[2]=HasValidTarget-AssassinAbility_DeadlyCadence)
+Behaviors=(BehaviorName=IsAbilityAvailable-AssassinAbility_DeadlyCadence, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-AssassinAbility_DeadlyCadence, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AssassinAbility_DeadlyCadence, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-AssassinAbility_DeadlyCadence, NodeType=Condition)

; Target scoring

+Behaviors=(BehaviorName=TargetScoreSkirmisherClass, NodeType=Selector, Child[0]=ScoreTargetIfSkirmisherClass, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetIfSkirmisherClass, NodeType=Sequence, Child[0]=TargetIsSoldierClass-Skirmisher, Child[1]=AddToTargetScore_40)

+Behaviors=(BehaviorName=TargetScoreXCOMSharpshooterClass, NodeType=Selector, Child[0]=ScoreTargetIfXCOMSharpshooterClass, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetIfXCOMSharpshooterClass, NodeType=Sequence, Child[0]=TargetIsSoldierClass-Sharpshooter, Child[1]=AddToTargetScore_10)

+Behaviors=(BehaviorName=TargetIsSoldierClass-Skirmisher, NodeType=Condition)
+Behaviors=(BehaviorName=TargetIsSoldierClass-Reaper, NodeType=Condition)
+Behaviors=(BehaviorName=TargetIsSoldierClass-Specialist, NodeType=Condition)