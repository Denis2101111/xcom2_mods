[XComGame.XGAIBehavior]
;AoEprofiles for paralyze (used for move/teleport, then paralyze)
;first profile uses a dummy ability with smaller aoe, since aoe targeting is a bit buggy for selftargeting abilities
;second profile is for offensive teleporting, teleport has an aoe attached (without effect) that is identical to that of paralyze
+AoEProfiles=( Profile=VenatorParalyzeProfile, Ability=VenatorParalyze, bIgnoreSelfDamage=True, bFailOnFriendlyFire=false, bFailOnObjectiveFire=false, bIgnoreRepeatAttackList=true, bTestTargetEffectsApply=true, bPathToTarget=true, MinTargets=2)
+AoEProfiles=( Profile=VenatorParalyzeTeleportProfile, Ability=VenatorParalyze, bIgnoreSelfDamage=True, bFailOnFriendlyFire=false, bFailOnObjectiveFire=false, bIgnoreRepeatAttackList=true, bTestTargetEffectsApply=true, MinTargets=2)
;Offensive Teleportprofile with fail on friendly fire to prevent clumping up
+AoEProfiles=( Profile=VenatorOffensiveTeleportProfile, Ability=VenatorParalyze, bIgnoreSelfDamage=True, bFailOnFriendlyFire=true, bFailOnObjectiveFire=false, bIgnoreRepeatAttackList=true, MinTargets=1)

+AoEProfiles=( Profile=RKStasisAoeProfile, Ability=RKStasis_AoE, bIgnoreSelfDamage=True, bFailOnObjectiveFire=False, bFailOnFriendlyFire=False, bIgnoreRepeatAttackList=true, MinTargets=2)

[XComGame.X2AIBTBehaviorTree]
;Custom nodes for aoe targeting (since AoEprofiles wont work with my singletargetstyle aoe ability)
+CustomNodes=(NodeTypeString="LEBVenatorCondition", ExtendsFromType="Condition", ClassName="LEBVenator.EnemyVenator_X2AIBTCustomCondition")
+CustomNodes=(NodeTypeString="LEBVenatorAction", ExtendsFromType="Action", ClassName="LEBVenator.EnemyVenator_X2AIBTCustomAction")

;***************
;*** Venator ***
;***************
+Behaviors=(BehaviorName="LEBVenatorRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LEBVenatorRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LEBVenatorRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LEBVenatorRedAbilitySelector)
+Behaviors=(BehaviorName=LEBVenatorRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LEBVenatorRedFirstAction, Child[2]=LEBVenatorRedLastAction)

+Behaviors=(BehaviorName=LEBVenatorRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LEBVenatorRedFirstActionSelector)
+Behaviors=(BehaviorName=LEBVenatorRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryVenatorFeedbackEnemy, \\
	Child[1]=TryVenatorFeedbackAlly, \\
	Child[2]=TryVenatorParalyze, \\
	Child[3]=TryMoveThenVenatorParalyze, \\
	Child[4]=TryOffensiveVenatorTeleport, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemy)

+Behaviors=(BehaviorName=LEBVenatorRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LEBVenatorRedLastActionSelector)
+Behaviors=(BehaviorName=LEBVenatorRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryVenatorFeedbackEnemy, \\
	Child[1]=TryVenatorFeedbackAlly, \\
	Child[2]=TryVenatorParalyze, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=TryBreakLosLEBVenator, \\
	Child[5]=SkipMove)


+Behaviors=(BehaviorName=TryVenatorReload, NodeType=Sequence, Child[0]=IsAbilityAvailable-Reload, Child[1]=SelectAbility-Reload)


;*FeedBack*

;Consider Casting Feedback on fellow Ayys
+Behaviors=(BehaviorName=TryVenatorFeedbackAlly, NodeType=Sequence, Child[0]=IsAbilityAvailable-VenatorFeedback, Child[1]=SelectTargetForVenatorFeedbackAlly, Child[2]=SelectAbility-VenatorFeedback)
+Behaviors=(BehaviorName=SelectTargetForVenatorFeedbackAlly, NodeType=Sequence, Child[0]=SetTargetStack-VenatorFeedback, Child[1]=ScoreAllTargets_VenatorFeedbackAlly, Child[2]=HasValidTarget-VenatorFeedback)
+Behaviors=(BehaviorName=ScoreAllTargets_VenatorFeedbackAlly, NodeType=RepeatUntilFail, Child[0]=ScoreTarget_VenatorFeedbackLoopAlly)
+Behaviors=(BehaviorName=ScoreTarget_VenatorFeedbackLoopAlly, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreTarget_VenatorFeedbackScoringAlly, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreTarget_VenatorFeedbackScoringAlly, NodeType=Successor, Child[0]=ScoreVenatorFeedbackOptionAlly)
+Behaviors=(BehaviorName=ScoreVenatorFeedbackOptionAlly, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=EnemiesInAbilityAoEAroundTarget-VenatorFeedback, Child[2]=LEBVenatorScoreByPsi, Child[3]=ScoreByEnemyAndAlliedUnitsInAoE, Child[4]=TargetScoreByScaledCurrStat-eStat_HP, Child[5]=RandomizedTiebreaker)

;Cast feedback on enemies
+Behaviors=(BehaviorName=TryVenatorFeedbackEnemy, NodeType=Sequence, Child[0]=IsAbilityAvailable-VenatorFeedback, Child[1]=SelectTargetForVenatorFeedback, Child[2]=SelectAbility-VenatorFeedback)
+Behaviors=(BehaviorName=SelectTargetForVenatorFeedback, NodeType=Sequence, Child[0]=SetTargetStack-VenatorFeedback, Child[1]=ScoreAllTargets_VenatorFeedback, Child[2]=HasValidTarget-VenatorFeedback)
+Behaviors=(BehaviorName=ScoreAllTargets_VenatorFeedback, NodeType=RepeatUntilFail, Child[0]=ScoreTarget_VenatorFeedbackLoop)
+Behaviors=(BehaviorName=ScoreTarget_VenatorFeedbackLoop, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreTarget_VenatorFeedbackScoring, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreTarget_VenatorFeedbackScoring, NodeType=Successor, Child[0]=ScoreVenatorFeedbackOption)
+Behaviors=(BehaviorName=ScoreVenatorFeedbackOption, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=TargetIsNotCivilian, Child[2]=LEBVenatorScoreByPsi, Child[3]=ScoreByEnemyAndAlliedUnitsInAoE, Child[4]=RandomizedTiebreaker)

;Conditions, Scoring, Actions:

;only fire, if at least two enemies are around the target
+Behaviors=(BehaviorName=EnemiesInAbilityAoEAroundTarget-VenatorFeedback, NodeType=LEBVenatorCondition, Param[0]=2)

;prefer targets with high psi score
+Behaviors=(BehaviorName=LEBVenatorScoreByPsi, NodeType=Sequence, Child[0]=TargetScoreByScaledCurrStat-eStat_PsiOffense)
+Behaviors=(BehaviorName=TargetScoreByScaledCurrStat-eStat_PsiOffense, NodeType=Action, Param[0]=1)

;prefer targets with many enemies and few allies around them
+Behaviors=(BehaviorName=ScoreByEnemyAndAlliedUnitsInAoE, NodeType=Sequence, Child[0]=TargetScoreByAoEAbilityEnemyCount-VenatorFeedback, Child[1]=TargetScoreByAoEAbilityAllyCount-VenatorFeedback)
+Behaviors=(BehaviorName=TargetScoreByAoEAbilityEnemyCount-VenatorFeedback, NodeType=LEBVenatorAction, Param[0]=50)
+Behaviors=(BehaviorName=TargetScoreByAoEAbilityAllyCount-VenatorFeedback, NodeType=LEBVenatorAction, Param[0]="-24")

;randomizer for tiebreaking purposes
+Behaviors=(BehaviorName=RandomizedTiebreaker, NodeType=RandSelector, Child[0]=AddToTargetScore_0, Param[0]=1, Child[1]=AddToTargetScore_1, Param[1]=1, Child[2]=AddToTargetScore_2, Param[2]=1, Child[3]=AddToTargetScore_3, Param[3]=1, Child[4]=AddToTargetScore_4, Param[4]=1, Child[5]=AddToTargetScore_5, Param[5]=1 )

;standard conditions and actions
+Behaviors=(BehaviorName=IsAbilityAvailable-VenatorFeedback, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-VenatorFeedback, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-VenatorFeedback, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-VenatorFeedback, NodeType=Condition)


;*Paralyze*

;try teleporting or moving offensively so Paralyze is possible
+Behaviors=(BehaviorName=TryMoveThenVenatorParalyze, NodeType=Selector, Child[0]=TryTeleportForVenatorParalyze, Child[1]=TryMoveForVenatorParalyze)

+Behaviors=(BehaviorName=TryTeleportForVenatorParalyze, NodeType=Sequence, Child[0]=IsAbilityAvailable-VenatorParalyze, Child[1]=IsAbilityAvailable-VenatorTeleport, Child[2]=NotLastActionPoint, Child[3]=LEBFindPotentialAoETargets-VenatorParalyzeTeleportProfile, Child[4]=FindValidFloorTile, Child[5]=SelectAbilityVenator-VenatorTeleport)
+Behaviors=(BehaviorName=TryMoveForVenatorParalyze, NodeType=Sequence, Child[0]=IsAbilityAvailable-VenatorParalyze, Child[1]=IsAbilityAvailable-StandardMove, Child[2]=NotLastActionPoint, Child[3]=LEBFindPotentialAoETargets-VenatorParalyzeProfile, Child[4]=FindValidFloorTile, Child[5]=SelectAbilityVenator-StandardMove)
;+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-VenatorParalyze, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=VenatorParalyzeDestination, Child[3]=SelectAbility-StandardMove)
;+Behaviors=(BehaviorName=VenatorParalyzeDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-VenatorParalyzeDummy, Child[2]=FindRestrictedDestination-MWP_Standard)

;Paralyze if at least two stunnable targets are found
+Behaviors=(BehaviorName=TryVenatorParalyze, NodeType=Sequence, Child[0]=IsAbilityAvailable-VenatorParalyze, Child[1]=LEBAbilityTargetUnitCount-VenatorParalyze, Child[2]=SelectAbility-VenatorParalyze)
+Behaviors=(BehaviorName=LEBAbilityTargetUnitCount-VenatorParalyze, NodeType=LEBVenatorCondition, Param[0]=2)

;standard conditions and actions
+Behaviors=(BehaviorName=IsAbilityAvailable-VenatorParalyze, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-VenatorParalyze, NodeType=Action)
+Behaviors=(BehaviorName=LEBFindPotentialAoETargets-VenatorParalyzeProfile, NodeType=LEBVenatorAction)
+Behaviors=(BehaviorName=RestrictToAbilityRange-VenatorParalyzeDummy, NodeType=Action)
+Behaviors=(BehaviorName=AddAbilityRangeWeight-VenatorParalyze, NodeType=Action, Param[0]="10") 


;*VenatorTeleport*
;teleport of the Venator is functionally identical to codex teleport, but has a dummy aoe effect attached so it can be used for paralyze targeting
;Offensive teleport with aoe targets for next turn
+Behaviors=(BehaviorName=TryOffensiveVenatorTeleport, NodeType=Sequence, Child[0]=IsAbilityAvailable-VenatorTeleport, Child[1]=NotLastActionPoint, Child[2]=LEBFindPotentialAoETargets-VenatorOffensiveTeleportProfile, Child[3]=FindValidFloorTile, Child[4]=SelectAbilityVenator-VenatorTeleport)

;Defensive Teleport when no action is suitable
+Behaviors=(BehaviorName=TryBreakLosLEBVenator, NodeType=Selector, Child[0]=LEBVenatorTryTeleportAway, Child[1]=LEBVenatorMoveAway)
+Behaviors=(BehaviorName=LEBVenatorTryTeleportAway, NodeType=Sequence, Child[0]=IsAbilityAvailable-VenatorTeleport, Child[1]=FindVenatorTeleportAwayDestination, Child[2]=SelectAbility-VenatorTeleport)
+Behaviors=(BehaviorName=FindVenatorTeleportAwayDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=SSRestrictFromKnownEnemyLoS, Child[2]=SetNoCoverMovement, Child[3]=UseDashMovement, Child[4]=FindRestrictedDestination-MWP_FallBack)
+Behaviors=(BehaviorName=LEBVenatorMoveAway, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SSRestrictFromKnownEnemyLoS, Child[3]=SetNoCoverMovement, Child[4]=FindRestrictedDestination-MWP_FallBack, Child[5]=SelectAbility-StandardMove)

;standard conditions and actions
+Behaviors=(BehaviorName=IsAbilityAvailable-VenatorTeleport, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAoETarget-VenatorParalyzeTeleportProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-VenatorOffensiveTeleportProfile, NodeType=Action)
+Behaviors=(BehaviorName=LEBFindPotentialAoETargets-VenatorParalyzeTeleportProfile, NodeType=LEBVenatorAction)
+Behaviors=(BehaviorName=LEBFindPotentialAoETargets-VenatorOffensiveTeleportProfile, NodeType=LEBVenatorAction)
+Behaviors=(BehaviorName=FindValidFloorTile, NodeType=LEBVenatorAction)
+Behaviors=(BehaviorName=SelectAbility-VenatorTeleport, NodeType=Action, param[0]=UseDestination)
+Behaviors=(BehaviorName=SelectAbilityVenator-VenatorTeleport, NodeType=LEBVenatorAction)
+Behaviors=(BehaviorName=SelectAbilityVenator-StandardMove, NodeType=LEBVenatorAction)

;*Scamper Behavior*

+Behaviors=(BehaviorName="LEBVenatorScamperRoot", NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=LEBVenatorAggressiveReveal, \\
		Child[2]=MoveNoCoverUnsafe, \\
		Child[3]=SkipMove)

+Behaviors=(BehaviorName=LEBVenatorAggressiveReveal, NodeType=Selector, Child[0]=TryVenatorParalyze, Child[1]=TryShootOrReloadOrBreakLoS)
+Behaviors=(BehaviorName=TryShootOrReloadOrBreakLoS, NodeType=RandSelector, Child[0]=TryShootOrReloadOrOverwatch, Param[0]=33, Child[1]=TryOverwatch, Param[1]=33, Child[2]=TryBreakLosLEBVenator, Param[2]=33)
+Behaviors=(BehaviorName=TryScamperTeleportForVenatorParalyze, NodeType=Sequence, Child[0]=IsAbilityAvailable-VenatorParalyze, Child[1]=IsAbilityAvailable-VenatorTeleport, Child[2]=LEBFindPotentialAoETargets-VenatorOffensiveTeleportProfile, Child[3]=FindValidFloorTile, Child[4]=SelectAbilityVenator-VenatorTeleport)



;******************
;*** Riftkeeper ***
;******************
+Behaviors=(BehaviorName="RiftkeeperRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=RiftkeeperRedAlert, Child[3]=RiftkeeperNoEnemySightedMove)
+Behaviors=(BehaviorName=RiftkeeperRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=RiftkeeperRedAbilitySelector)
+Behaviors=(BehaviorName=RiftkeeperRedAbilitySelector, NodeType=Selector, Child[0]=RiftkeeperRedFirstAction, Child[1]=RiftkeeperRedLastAction)

+Behaviors=(BehaviorName=RiftkeeperRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=RiftkeeperRedFirstActionSelector)
+Behaviors=(BehaviorName=RiftkeeperRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryRiftportal, \\
	Child[1]=TryRKStasis, \\
	Child[2]=TryRiftportalstrong, \\
	Child[3]=RKTryAnimaConsumeOnEnemy, \\
	Child[4]=RKTryAnimaConsumeOnAlly, \\
	Child[5]=ShootIfAvailable, \\
	Child[6]=HuntEnemy)
+Behaviors=(BehaviorName=RiftkeeperRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=RiftkeeperRedLastActionSelector)
+Behaviors=(BehaviorName=RiftkeeperRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryRiftportalstrong, \\
	Child[1]=TryRiftportal, \\
	Child[2]=RKTryAnimaConsumeOnEnemy, \\
	Child[3]=RKTryAnimaConsumeOnAlly, \\
	Child[4]=TryRKStasis, \\
	Child[5]=NCMoveFOW, \\
	Child[6]=ShootIfAvailable, \\
	Child[7]=SkipMove)

;default to being closed if no enemies are sighted and just moving around
+Behaviors=(BehaviorName=RiftkeeperNoEnemySightedMove, NodeType=Selector, Child[0]=TryGatekeeperClose, Child[1]=GenericAlertHandler, Child[2]=GenericGreenMovement)

;Stasis behaviours
+Behaviors=(BehaviorName=IsAbilityReady-RKStasis, NodeType=Condition, Param[0]="AA_ValueCheckFailed", Param[1]="AA_GatekeeperClosed")
+Behaviors=(BehaviorName=IsAbilityAvailable-RKStasis, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-RKStasis, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RKStasis, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-RKStasis, NodeType=Action)
+Behaviors=(BehaviorName=SelectTargetForRKStasis, NodeType=Sequence, Child[0]=SetTargetStack-RKStasis, Child[1]=GenericSelectTargetSomewhatRandomly, Child[2]=HasValidTarget-RKStasis)

+Behaviors=(BehaviorName=TryRKStasis, NodeType=Selector, Child[0]=TryRKStasisActivate, Child[1]=TryGatekeeperOpenIfTryRKStasisReady)
+Behaviors=(BehaviorName=TryRKStasisActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-RKStasis, Child[1]=SelectTargetForRKStasis, Child[2]=SelectAbility-RKStasis)
+Behaviors=(BehaviorName=TryGatekeeperOpenIfTryRKStasisReady, NodeType=Sequence, Child[0]=IsAbilityReady-RKStasis, Child[1]=LEBAnyXcomVisible, Child[2]=TryRiftkeeperOpen)

;Riftportal behaviours
+Behaviors=(BehaviorName=TryRiftportal, NodeType=Selector, Child[0]=TryRiftportalActivate, Child[1]=TryGatekeeperCloseIfRiftportalReady) 
+Behaviors=(BehaviorName=TryRiftportalActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-Riftportal, Child[1]=LEBAnyXcomVisible, Child[2]=SelectAbility-Riftportal)
+Behaviors=(BehaviorName=TryGatekeeperCloseIfRiftportalReady, NodeType=Sequence, Child[0]=IsAbilityReady-Riftportal, Child[1]=LEBAnyXcomVisible, Child[2]=TryGatekeeperClose)

+Behaviors=(BehaviorName=IsAbilityReady-Riftportal, NodeType=Condition, Param[0]="AA_ValueCheckFailed", Param[1]="AA_GatekeeperOpened")
+Behaviors=(BehaviorName=IsAbilityAvailable-Riftportal, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Riftportal, NodeType=Action)
+Behaviors=(BehaviorName=LEBAnyXcomVisible, NodeType=LEBVenatorCondition)

+Behaviors=(BehaviorName=TryRiftportalstrong, NodeType=Selector, Child[0]=TryRiftportalstrongActivate, Child[1]=TryGatekeeperCloseIfRiftportalstrongReady) 
+Behaviors=(BehaviorName=TryRiftportalstrongActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-Riftportalstrong, Child[1]=LEBAnyXcomVisible, Child[2]=SelectAbility-Riftportalstrong)
+Behaviors=(BehaviorName=TryGatekeeperCloseIfRiftportalstrongReady, NodeType=Sequence, Child[0]=IsAbilityReady-Riftportalstrong, Child[1]=LEBAnyXcomVisible, Child[2]=TryGatekeeperClose)

+Behaviors=(BehaviorName=IsAbilityReady-Riftportalstrong, NodeType=Condition, Param[0]="AA_ValueCheckFailed", Param[1]="AA_GatekeeperOpened")
+Behaviors=(BehaviorName=IsAbilityAvailable-Riftportalstrong, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Riftportalstrong, NodeType=Action)

;Riftportal on scamper
+Behaviors=(BehaviorName=ScamperRoot_Riftportal, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=TryRiftportal, \\
		Child[2]=NCMoveDefensive, \\
		Child[3]=MoveNoCoverUnsafe, \\
		Child[4]=SkipMove)

;coward move
+Behaviors=(BehaviorName=NCMoveFOW, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=NCMoveFOWUnsafe)
+Behaviors=(BehaviorName=NCMoveFOWUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SSRestrictFromKnownEnemyLoS, Child[3]=SetNoCoverMovement, Child[4]=FindRestrictedDestination-MWP_FallBack, Child[5]=SelectAbility-StandardMove)

;Retract
+Behaviors=(BehaviorName=TryRKRetract, NodeType=Sequence, Child[0]=IsAbilityAvailable-RKRetract, Child[1]=SelectAbility-RKRetract)
+Behaviors=(BehaviorName=IsAbilityAvailable-RKRetract, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RKRetract, NodeType=Action)

;Equivalentabilities for new open/close ability
+EquivalentAbilities=(KeyName=GatekeeperClose, EquivalentAbilityName[0]=RiftkeeperClose)

;new Riftkeeperopen behaviour (close not necessary because of Equivalentabilities)
+Behaviors=(BehaviorName=TryRiftkeeperOpen, NodeType=Sequence, Child[0]=AffectedByEffect-RiftkeeperClosedEffect, Child[1]=IsAbilityAvailable-RiftkeeperOpen, Child[2]=SelectAbility-RiftkeeperOpen)
+Behaviors=(BehaviorName=AffectedByEffect-RiftkeeperClosedEffect, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-RiftkeeperOpen, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RiftkeeperOpen, NodeType=Action)

;New Anima Consume necessary because of new Open-behaviour
+Behaviors=(BehaviorName=RKTryAnimaConsumeOnEnemy, NodeType=Sequence, Child[0]=HasWounds, Child[1]=IsAbilityReady-AnimaConsume, Child[2]=RKAnimaConsumeStepSelectorEnemy)
+Behaviors=(BehaviorName=RKAnimaConsumeStepSelectorEnemy, NodeType=Selector, Child[0]=AnimaConsumeAttackEnemy, Child[1]=RKAnimaConsumeAttackEnemyUnopened, Child[2]=MoveMeleeIfFirstAbilityFANATIC)
+Behaviors=(BehaviorName=RKAnimaConsumeAttackEnemyUnopened, NodeType=Sequence, Child[0]=AnimaConsumeNotAvailable, Child[1]=SelectPotentialTargetForEnemyAnimaConsume, Child[2]=IsTargetInAttackRange-StandardMelee, Child[3]=TryRiftkeeperOpen)

+Behaviors=(BehaviorName=RKTryAnimaConsumeOnAlly, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=IsVisibleToPlayer, Child[2]=IsAbilityReady-AnimaConsume, Child[3]=RKAnimaConsumeStepSelectorAlly)
+Behaviors=(BehaviorName=RKAnimaConsumeStepSelectorAlly, NodeType=Selector, Child[0]=AnimaConsumeAttackAlly, Child[1]=RKAnimaConsumeAttackAllyUnopened, Child[2]=MoveToPotentialMeleeIfFirstAbilityFANATIC)
+Behaviors=(BehaviorName=RKAnimaConsumeAttackAllyUnopened, NodeType=Sequence, Child[0]=AnimaConsumeNotAvailable, Child[1]=SelectPotentialTargetForAllyAnimaConsume, Child[2]=IsTargetInAttackRange-StandardMelee, Child[3]=TryRiftkeeperOpen)

;Riftkeeper Mk II
+Behaviors=(BehaviorName="RiftkeeperMk2Root", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=RiftkeeperMk2RedAlert, Child[3]=RiftkeeperNoEnemySightedMove)
+Behaviors=(BehaviorName=RiftkeeperMk2RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=RiftkeeperMk2RedAbilitySelector)
+Behaviors=(BehaviorName=RiftkeeperMk2RedAbilitySelector, NodeType=Selector, Child[0]=RiftkeeperMk2RedFirstAction, Child[1]=RiftkeeperMk2RedLastAction)

+Behaviors=(BehaviorName=RiftkeeperMk2RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=RiftkeeperMk2RedFirstActionSelector)
+Behaviors=(BehaviorName=RiftkeeperMk2RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryRiftportal, \\
	Child[1]=TryRKStasis_AoE, \\
	Child[2]=TryRiftportalstronger, \\
	Child[3]=TryRiftportalstrong, \\
	Child[4]=RKTryAnimaConsumeOnEnemy, \\
	Child[5]=RKTryAnimaConsumeOnAlly, \\
	Child[6]=ShootIfAvailable, \\
	Child[7]=HuntEnemy)
+Behaviors=(BehaviorName=RiftkeeperMk2RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=RiftkeeperMk2RedLastActionSelector)
+Behaviors=(BehaviorName=RiftkeeperMk2RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryRiftportalstronger, \\
	Child[1]=TryRiftportalstrong, \\
	Child[2]=TryRiftportal, \\
	Child[3]=TryRKStasis_AoE, \\
	Child[4]=RKTryAnimaConsumeOnEnemy, \\
	Child[5]=RKTryAnimaConsumeOnAlly, \\
	Child[6]=NCMoveFOW, \\
	Child[7]=ShootIfAvailable, \\
	Child[8]=SkipMove)

;Stasis_AoE behaviours
+Behaviors=(BehaviorName=IsAbilityReady-RKStasis_AoE, NodeType=Condition, Param[0]="AA_ValueCheckFailed", Param[1]="AA_GatekeeperClosed")
+Behaviors=(BehaviorName=IsAbilityAvailable-RKStasis_AoE, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RKStasis_AoE, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RKStasisAoeProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RKStasisAoeProfile, NodeType=Action)

+Behaviors=(BehaviorName=TryRKStasis_AoE, NodeType=Selector, Child[0]=TryRKStasis_AoEActivate, Child[1]=TryGatekeeperOpenIfTryRKStasis_AoEReady)
+Behaviors=(BehaviorName=TryRKStasis_AoEActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-RKStasis_AoE, Child[1]=FindPotentialAoETargets-RKStasisAoeProfile, Child[2]=SelectAoETarget-RKStasisAoeProfile, Child[3]=SelectAbility-RKStasis_AoE)
+Behaviors=(BehaviorName=TryGatekeeperOpenIfTryRKStasis_AoEReady, NodeType=Sequence, Child[0]=IsAbilityReady-RKStasis_AoE, Child[1]=FindPotentialAoETargets-RKStasisAoeProfile, Child[2]=SelectAoETarget-RKStasisAoeProfile, Child[3]=TryRiftkeeperOpen)

;stronger Riftportal
+Behaviors=(BehaviorName=TryRiftportalstronger, NodeType=Selector, Child[0]=TryRiftportalstrongerActivate, Child[1]=TryGatekeeperCloseIfRiftportalstrongerReady) 
+Behaviors=(BehaviorName=TryRiftportalstrongerActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-Riftportalstronger, Child[1]=LEBAnyXcomVisible, Child[2]=SelectAbility-Riftportalstronger)
+Behaviors=(BehaviorName=TryGatekeeperCloseIfRiftportalstrongerReady, NodeType=Sequence, Child[0]=IsAbilityReady-Riftportalstronger, Child[1]=LEBAnyXcomVisible, Child[2]=TryGatekeeperClose)

+Behaviors=(BehaviorName=IsAbilityReady-Riftportalstronger, NodeType=Condition, Param[0]="AA_ValueCheckFailed", Param[1]="AA_GatekeeperOpened")
+Behaviors=(BehaviorName=IsAbilityAvailable-Riftportalstronger, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Riftportalstronger, NodeType=Action)