;------------------------------------------------------------------------------
[WOTC_CostBasedAbilityColors.UITacticalHUD_Ability_WOTC_CostBasedAbilityColors]
;------------------------------------------------------------------------------

; Turn On/Off detailed logging for troubleshooting
; Leave FALSE unless needed - may have a performance impact
bDEBUG_LOGGING = false

; ICON BORDER COLORS
; The 'LastAction' colors can be replaced with either the straight AP-based color or Turn-Ending color if you want the simpler approach of always showing the AP cost
; or always showing whether the action will end the turn. For example, if you want to have 1AP, non-turn ending actions show yellow as plain turn ending actions when
; the unit only has 1AP left like previous versions, copy the OneActionEndTurn color into the OneActionLastAction variable. Alternatively, if you want the abilities
; to show their cost regardless of the unit's current AP considerations, copy the OneAction color into the OneActionLastAction variable.
AbilityCostColor_FreeAction =			"5ac864"	;Green
AbilityCostColor_OneAction =			"41afd7"	;Blue
AbilityCostColor_OneActionLastAction =	"62968d"	;Teal
AbilityCostColor_OneActionEndTurn =		"e1be46"	;Yellow
AbilityCostColor_TwoPlusActions =		"ff6f00"	;Orange
AbilityCostColor_TwoPlusLastAction =	"bd7a0f"	;Yellow Orange
AbilityCostColor_TwoPlusEndTurn =		"bf5e0a"	;Dark Orange
AbilityCostColor_Unavailable =			"888888"	;Grey


; Turn On/Off Full Color Mode - Icons' Border AND inner Symbol portions will be colored based on the action cost
; (the bCHANGE_SYMBOL_COLORS variable below is ignored if Full Color Mode is true - defaults to false as I feel it washes out the icon symbol shape too much)
bFULL_COLOR_MODE = false

; Turn On/Off to override the default icon symbol (inner) colors based on the ability source/type (Recommended On/true)
; (by default, this is to de-clutter the UI by removing some of the color variation on the inner symbols of different ability types that don't serve much purpose)
bCHANGE_SYMBOL_COLORS = true

; ICON SYMBOL COLORS
AbilityTypeColor_MissionObjective =	"96c896"
AbilityTypeColor_Commander =		"96c896"
AbilityTypeColor_Psionic =			"b6b3e3"
AbilityTypeColor_Perk =				"e6e6c8"
AbilityTypeColor_Debuff =			"e6e6c8"
AbilityTypeColor_Item =				"e6e6c8"
AbilityTypeColor_Standard =			"e6e6c8"


; Turn On/Off to handle Free Reloads from Auto-Loaders
; You may want to disable this if you use something like Free Reload Anytime, etc.
; (by default, this will automatically detect and disable for Free Reload Anytime)
bHANDLE_FREE_RELOADS = true
bAUTO_DETECT_FREE_RELOAD_ANYTIME = true


; ABILITY COST COLOR OVERRIDE LIST
; ********************************
; Use ability cost color overrides to correct any ability colors that dont get handled properly - this can include mod-added abilities that only return
; actions via PostAbilityCostPaid (without changing the actual action point costs), etc.
; The overrides are entered using the AbilityCostColorOverride struct and the members and their usage are detailed below:
;		var string	AbilityName				(the name of the ability being modified) - REQUIRED field
;		var string	ModifyingAbilityName	(the name of the ability that the unit must have to validate the modify) - OPTIONAL, can be left empty
;		var string	ModifyingEffectName		(the name of the effect that the unit must have to validate the modify) - OPTIONAL, can be left empty
;		var string	OverrideColor			(if a color string is entered, the ability being modified will use that color instead) - OPTIONAL, can be left empty
;		var bool	bIsFreeAction			(if true, the ability being modified will be considered a free action) - OPTIONAL, can be left empty
;		var bool	bIsTurnEnding			(if true, the ability being modified will be considered a turn ending action) - OPTIONAL, can be left empty
;		var bool	bNotTurnEnding			(if true, the ability being modified will be considered a non-turn ending action) - OPTIONAL, can be left empty
;
;		NOTES:	More than one entry for a single ability can be entered when there are more than one ModifyingAbilityName or ModifyingEffectName that
;				may modify that ability. When a ModifyingAbilityName AND a ModifyingEffectName are present in the same AbilityCostColorOverride entry,
;				they will be treated as an OR statement. The OverrideColor, if defined, will take first priority - use this to give an ability a border
;				color outside the preset categories. The bIsFreeAction bool will be evaluated next and, if true, will use the FreeAction border color.
;				If neither an OverrideColor or the bIsFreeAction bool are defined, then the TurnEnding bools will be evaluated for their preset colors.
;				bIsFreeAction and bIsTurnEnding are immediate overrides - when either one is found in an override, their preset color is used and no
;				other override entries are evaluated. bNotTurnEnding, however, is not immediate - the value is stored and continues evaluating other
;				override entries, primarily to allow any potential bIsFreeAction overrides to supercede it.
;
; Use the following entry format - only include the OPTIONAL members that you need:
;+AbilityCostColorOverrides=(AbilityName=Name, ModifyingAbilityName=Name, ModifyingEffectName=Name, OverrideColor=Color_String, bIsFreeAction=Bool, bIsTurnEnding=Bool, bNotTurnEnding=Bool)
; ********************************
+AbilityCostColorOverrides=(AbilityName=Evac, bIsFreeAction=true)
+AbilityCostColorOverrides=(AbilityName=EvacAll, bIsFreeAction=true)
+AbilityCostColorOverrides=(AbilityName=LostAutofire, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=OverwatchAll, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=OverwatchOthers, bIsFreeAction=true)
+AbilityCostColorOverrides=(AbilityName=SmartOverwatchAll, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=SmartOverwatchOthers, bIsFreeAction=true)
+AbilityCostColorOverrides=(AbilityName=Whiplash, bIsFreeAction=true)
