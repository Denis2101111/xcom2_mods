;------------------------------------------------------------------------------
[WOTC_CostBasedAbilityColors.UITacticalHUD_Ability_WOTC_CostBasedAbilityColors]
;------------------------------------------------------------------------------
;note: this file won't do anything unless you're already using Cost Based Ability Colors.

; ABILITY COST COLOR OVERRIDE LIST
; ********************************
; Use ability cost color overrides to correct any ability colors that dont get handled properly - this can include mod-added abilities that only return
; actions via PostAbilityCostPaid (without changing the actual action point costs), etc.
; The overrides are entered using the AbilityCostColorOverride struct and the members and their usage are detailed below:
;       var string  AbilityName             (the name of the ability being modified) - REQUIRED field
;       var string  ModifyingAbilityName    (the name of the ability that the unit must have to validate the modify) - OPTIONAL, can be left empty
;       var string  ModifyingEffectName     (the name of the effect that the unit must have to validate the modify) - OPTIONAL, can be left empty
;       var string  OverrideColor           (if a color string is entered, the ability being modified will use that color instead) - OPTIONAL, can be left empty
;       var bool    bIsFreeAction           (if true, the ability being modified will be considered a free action) - OPTIONAL, can be left empty
;       var bool    bIsTurnEnding           (if true, the ability being modified will be considered a turn ending action) - OPTIONAL, can be left empty
;       var bool    bNotTurnEnding          (if true, the ability being modified will be considered a non-turn ending action) - OPTIONAL, can be left empty
;
;       NOTES:  More than one entry for a single ability can be entered when there are more than one ModifyingAbilityName or ModifyingEffectName that
;               may modify that ability. When a ModifyingAbilityName AND a ModifyingEffectName are present in the same AbilityCostColorOverride entry,
;               they will be treated as an OR statement. The OverrideColor, if defined, will take first priority - use this to give an ability a border
;               color outside the preset categories. The bIsFreeAction bool will be evaluated next and, if true, will use the FreeAction border color.
;               If neither an OverrideColor or the bIsFreeAction bool are defined, then the TurnEnding bools will be evaluated for their preset colors.
;               bIsFreeAction and bIsTurnEnding are immediate overrides - when either one is found in an override, their preset color is used and no
;               other override entries are evaluated. bNotTurnEnding, however, is not immediate - the value is stored and continues evaluating other
;               override entries, primarily to allow any potential bIsFreeAction overrides to supercede it.
;
; Use the following entry format - only include the OPTIONAL members that you need:
;+AbilityCostColorOverrides=(AbilityName=Name, ModifyingAbilityName=Name, ModifyingEffectName=Name, OverrideColor=Color_String, bIsFreeAction=Bool, bIsTurnEnding=Bool, bNotTurnEnding=Bool)
; ********************************
+AbilityCostColorOverrides=(AbilityName=MZHailBullet, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZBladeDance, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZBlitzAttack, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZMacabreWaltz, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZAuroraWave, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZMindMerge, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZShadeScratch, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZDancingDeath, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZListonStyle, bIsTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZDriftingContact, bNotTurnEnding=true)
+AbilityCostColorOverrides=(AbilityName=MZShieldCharge, bIsTurnEnding=true)