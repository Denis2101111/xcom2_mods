[XComGame.X2AIBTBehaviorTree]
; --- don't shoot if you're not an alien
; --- basically since non alien units don't really obey the objective target limits, never let them target the objective in the first place
-Behaviors=(BehaviorName=TryAttackPriorityTarget, NodeType=Sequence, Child[0]=HasPriorityTarget, Child[1]=AttackPriorityTarget)
+Behaviors=(BehaviorName=TryAttackPriorityTarget, NodeType=Sequence, Child[0]=IsTeam-eTeam_Alien, Child[1]=HasPriorityTarget, Child[2]=AttackPriorityTarget)



+CustomNodes=(NodeTypeString="RhiCondition", ExtendsFromType="Condition", ClassName="RHIncursion.X2AIBTCondition_NoObjectiveBehavior")
+Behaviors=(BehaviorName=IsObjectiveUnitOrAnObject, NodeType=RhiCondition)
+Behaviors=(BehaviorName=IsNotObjectiveUnitOrAnObject, NodeType=Inverter, Child[0]=IsObjectiveUnitOrAnObject)



+Behaviors=(BehaviorName=TryHighPriorityShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=HaveHighPriorityTarget, Child[2]=ShootIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=FindHighPriorityTarget, NodeType=RepeatUntilFail, Child[0]=NotHighPriorityEvaluateTarget)
+Behaviors=(BehaviorName=NotHighPriorityEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsNotHighPriority)
+Behaviors=(BehaviorName=TargetIsNotHighPriority, NodeType=Inverter, Child[0]=TargetIsHighPriority)
+Behaviors=(BehaviorName=TargetIsHighPriority, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetKillableOrFlanked, Child[2]=IsNotObjectiveUnitOrAnObject, Child[3]=AddToTargetScore_1000, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetKillableOrFlanked, NodeType=Selector, Child[0]=TargetIsKillable,  Child[1]=IsFlankingTarget)

;new shoot or reload or overwatch to avoid targeting civilians
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_Rhi, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable_Rhi, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ShootIfAvailable_Rhi, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForStandardShot_Rhi, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForStandardShot_Rhi, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=GenericSelectBestTarget_Rhi, Child[2]=HasValidTarget-StandardShot)

+Behaviors=(BehaviorName=GenericSelectBestTarget_Rhi, NodeType=RepeatUntilFail, Child[0]=GenericEvaluateTarget_Rhi)
+Behaviors=(BehaviorName=GenericEvaluateTarget_Rhi, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations_Rhi, Child[2]=UpdateBestTarget);
+Behaviors=(BehaviorName=GenericTargetEvaluations_Rhi, NodeType=Sequence, Child[0]=TargetNotMindControlled, Child[1]=TargetScoreHitChance, Child[2]=TargetScoreHealth, Child[3]=TargetScoreFlanking, Child[4]=TargetScoreMarked, Child[5]=ApplyDifficultyModifiers, Child[6]=TargetScoreInvalidateCivilians, Child[7]=IsNotObjectiveUnitOrAnObject, Child[8]=AvoidBoundAndPanickedTargets)

;Credit for templar AI lines goes to Realitymachina
+Behaviors=(BehaviorName="RhiTemplarRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=RhiTemplar_RedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=RhiTemplar_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=RhiTemplar_RedAbilitySelector)
+Behaviors=(BehaviorName=RhiTemplar_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=RhiTemplarRedFirstAction, Child[2]=RhiTemplarRedLastAction)

+Behaviors=(BehaviorName=RhiTemplarRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=RhiTemplarRedFirstActionSelector)
; Update - removed stand-alone MoveAggressive since it should be linked with the desired ability to be used.

+Behaviors=(BehaviorName=RhiTemplarRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryParry, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=TryRendOrVolt, \\
	Child[3]=SelectMoveProfileByJob, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=RhiTemplarRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=RhiTemplarRedLastActionSelector)
+Behaviors=(BehaviorName=RhiTemplarRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryParry, \\
	Child[1]=TryRend, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrAggressive) 

+Behaviors=(BehaviorName=TryRendOrVolt, NodeType=RandSelector, Child[0]=TryRend, Param[0]=75, Child[1]=TryVolt, Param[1]=25)

;Volt
+Behaviors=(BehaviorName=TryVolt, NodeType=Sequence, Child[0]=IsAbilityAvailable-Volt, Child[1]=SelectTargetForVolt, Child[2]=SelectAbility-Volt) 
+Behaviors=(BehaviorName=IsAbilityAvailable-Volt, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForVolt, NodeType=Sequence, Child[0]=SetTargetStack-Volt, Child[1]=IterateTargetsForVolt, Child[2]=HasValidTarget-Volt)
+Behaviors=(BehaviorName=SetTargetStack-Volt, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForVolt, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForVolt)
+Behaviors=(BehaviorName=IterateNextTargetForVolt, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForVolt, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForVolt, NodeType=Successor, Child[0]=EvaluateForVolt)
+Behaviors=(BehaviorName=EvaluateForVolt, NodeType=Sequence, Child[0]=TargetIsNotCivilian,  Child[1]=TargetNotMindControlled,  Child[2]=TargetNotTeamTheLost, Child[3]=TargetIsEnemy, Child[4]=TargetIsNotEnemyVIP, Child[5]=TargetNotBoundOrPanicked, Child[6]=TargetIsAttackable, Child[7]=IsNotObjectiveUnitOrAnObject, Child[8]=TargetScoreByScaledDistance-1, Child[9]=AddToTargetScore_100, Child[10]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-Volt, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Volt, NodeType=Action)
+Behaviors=(BehaviorName=TargetNotTeamTheLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)
;
+Behaviors=(BehaviorName=TryParry, NodeType=Sequence, Child[0]=IsAbilityReady-ParryActivate, Child[1]=SelectAbility-ParryActivate)
+Behaviors=(BehaviorName=IsAbilityReady-ParryActivate, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ParryActivate, NodeType=Action)

+Behaviors=(BehaviorName=HasValidTarget-Rend, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-Rend, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-Rend, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Rend, NodeType=Action)

+Behaviors=(BehaviorName=TryRend, NodeType=Sequence, Child[0]=IsAbilityAvailable-Rend, Child[1]=RendStepSelector)
+Behaviors=(BehaviorName=RendStepSelector, NodeType=Selector, Child[0]=RendAttack, Child[1]=MoveMeleeIfFirstAbilityFANATIC)
+Behaviors=(BehaviorName=RendAttack, NodeType=Sequence, Child[0]=SelectTargetForRend, Child[1]=SelectAbility-Rend)

; targeting
+Behaviors=(BehaviorName=SelectTargetForRend, NodeType=Sequence, Child[0]=SetTargetStack-Rend, Child[1]=SelectBestTargetForRend, Child[2]=HasValidTarget-Rend)
+Behaviors=(BehaviorName=SelectBestTargetForRend, NodeType=RepeatUntilFail, Child[0]=TargetSelectIterationForRend)
+Behaviors=(BehaviorName=TargetSelectIterationForRend, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=EvaluateTargetForRend, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=EvaluateTargetForRend, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreMarked, Child[3]=AvoidBoundAndPanickedTargets, Child[4]=TargetScoreInvalidateCivilians, Child[5]=IsNotObjectiveUnitOrAnObject, Child[6]=SSTeamSpecificModifiers)

;Credit for some parts of skirmisher lines goes to Derbk


; +++ Equivs

+EquivalentAbilities=( KeyName=HunterGrappleRHI, EquivalentAbilityName[0]=SkirmisherGrappleRHI)

; +++ Scamper Trees

+Behaviors=(BehaviorName=ScamperRoot_SkirmisherRHI, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=MaybeGrappleRHI30, Child[2]=GrappleRHIWhenUnsafe, Child[3]=MoveStandardWithLoSUnsafe, Child[4]=MoveStandardUnsafe, Child[5]=SkipMove)




; ++ Ability Use
+Behaviors=(BehaviorName=SelectAbility-SkirmisherGrappleRHI, NodeType=Action, param[0]=UseDestination)
+Behaviors=(BehaviorName=SelectAbility-JusticeRhi, NodeType=Action)
; ++ Movement Restrictors

+Behaviors=(BehaviorName=RestrictToAbilityRange-SkirmisherGrappleRHI, NodeType=Action)




+Behaviors=(BehaviorName=TryJusticeRhi, NodeType=Sequence, Child[0]=IsAbilityAvailable-JusticeRhi, Child[1]=SelectJusticeRhiTarget, Child[2]=SelectAbility-JusticeRhi)

+Behaviors=(BehaviorName=IsAbilityAvailable-JusticeRhi, NodeType=Condition)

+Behaviors=(BehaviorName=SetTargetStack-JusticeRhi, NodeType=Action)

+Behaviors=(BehaviorName=HasValidTarget-JusticeRhi, NodeType=Condition)

+Behaviors=(BehaviorName=IsAbilityAvailable-SkirmisherGrappleRHI, NodeType=Condition)

+Behaviors=(BehaviorName=SelectJusticeRhiTarget, NodeType=Sequence, Child[0]=SetTargetStack-JusticeRhi, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-JusticeRhi)

;also taken from realityMachina


; Skirmisher
+Behaviors=(BehaviorName="RHISkirmisherCharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=Skirmisher_RHI_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=Skirmisher_RHI_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Skirmisher_RHI_RedAbilitySelector)
+Behaviors=(BehaviorName=Skirmisher_RHI_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Skirmisher_RHI_RedFirstAction, Child[2]=Skirmisher_RHI_RedLastAction)
+Behaviors=(BehaviorName=Skirmisher_RHI_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Skirmisher_RHI_RedFirstActionSelector)
+Behaviors=(BehaviorName=Skirmisher_RHI_RedFirstActionSelector, NodeType=Selector, Child[0]=ShootWhenFlanking,      Child[1]=DoIfFlankedRunAndGun,      Child[2]=RnGCounterFlank, Child[3]=TryJusticeRhi_Rhi, Child[4]=ShootWhenKillShot_Rhi,      Child[5]=PostGrappleRHI,      Child[6]=PostMeleeGrappleRHI,      Child[7]=DoIfFlankedMove_Skirm,       Child[8]=MaybeMelee70,      Child[9]=AdvCaptainTryMoveThenGrenade,       Child[10]=MoveAdvanceToCover,     Child[11]=TryShootOrReloadOrOverwatch,      Child[12]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Skirmisher_RHI_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Skirmisher_RHI_RedLastActionSelector)
+Behaviors=(BehaviorName=Skirmisher_RHI_RedLastActionSelector, NodeType=Selector,      Child[0]=PostGrappleRHI,      Child[1]=PostMeleeGrappleRHI,      Child[2]=DoIfFlankedMove_Skirm,      Child[3]=AdvCaptainTryGrenade,      Child[4]=TryJusticeRhi_Rhi,      Child[5]=TryShootOrReloadOrOverwatch,      Child[6]=HuntEnemyWithCover,      Child[7]=MoveDefensive)

; What the Skirm is allowed to do after GrappleRHI
+Behaviors=(BehaviorName=PostGrappleRHI, NodeType=Sequence,      Child[0]=WasLastAbility-SkirmisherGrappleRHI,      Child[1]=Skirmisher_PostGrappleRHISelector)
+Behaviors=(BehaviorName=Skirmisher_PostGrappleRHISelector, NodeType=Selector,      Child[0]=AdvCaptainTryGrenade,      Child[1]=TryJusticeRhi_Rand60,      Child[2]=TryShootOrReloadOrOverwatch,      Child[3]=MoveDefensive)
; Make the Skirm GrappleRHI out after meleeing
+Behaviors=(BehaviorName=PostMeleeGrappleRHI, NodeType=Sequence,      Child[0]=DidTheSkirmMelee,      Child[1]=TryGrappleRHI_Skirm)
+Behaviors=(BehaviorName=DidTheSkirmMelee, NodeType=Selector, Child[0]=WasLastAbility-SkirmisherMelee, Child[1]=WasLastAbility-JusticeRhi)
;Run And Gun when Flanked, then Counterflank
+Behaviors=(BehaviorName=DoIfFlankedRunAndGun, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=TryRunAndGun)
+Behaviors=(BehaviorName=RnGCounterFlank, NodeType=Sequence, Child[0]=WasLastAbility-RunAndGun, Child[1]=TryToCounterflank)
;GrappleRHI when Flanked
+Behaviors=(BehaviorName=DoIfFlankedMove_Skirm, NodeType=Selector, Child[0]=MaybeMelee40, Child[1]=DoIfFlankedGrappleRHI, Child[2]=DoIfFlankedMove)
+Behaviors=(BehaviorName=DoIfFlankedGrappleRHI, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=TryGrappleRHI_Skirm)
;Even more Grappling
+Behaviors=(BehaviorName=TryGrappleRHI_Skirm, NodeType=Selector, Child[0]=TryGrappleRHI_Skirm_Flank, Child[1]=TryGrappleRHI_Skirm_Any)
+Behaviors=(BehaviorName=TryGrappleRHI_Skirm_Any, NodeType=Sequence, Child[0]=IsAbilityAvailable-SkirmisherGrappleRHI, Child[1]=FindGrappleRHIDestination_Skirm_Any, Child[2]=SelectAbility-SkirmisherGrappleRHI)
+Behaviors=(BehaviorName=TryGrappleRHI_Skirm_Flank, NodeType=Sequence, Child[0]=IsAbilityAvailable-SkirmisherGrappleRHI, Child[1]=FindGrappleRHIDestination_Skirm_Flank, Child[2]=SelectAbility-SkirmisherGrappleRHI)
+Behaviors=(BehaviorName=FindGrappleRHIDestination_Skirm_Any, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=OverridePreferredDestinationToSpawnLocation, Child[2]=RestrictToAbilityRange-SkirmisherGrappleRHI, Child[3]=RestrictToEnemyLoS, Child[4]=RestrictToUnflanked, Child[5]=UseDashMovement, Child[6]=FindRestrictedDestination-MWP_GrappleRHISkirm)
+Behaviors=(BehaviorName=FindGrappleRHIDestination_Skirm_Flank, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=OverridePreferredDestinationToSpawnLocation, Child[2]=RestrictToAbilityRange-SkirmisherGrappleRHI, Child[3]=RestrictToEnemyLoS, Child[4]=RestrictToUnflanked, Child[5]=RestrictToflanking, Child[6]=UseDashMovement, Child[7]=FindRestrictedDestination-MWP_GrappleRHISkirm)
; Random GrappleRHI, for scamper
+Behaviors=(BehaviorName=MaybeGrappleRHI30, NodeType=RandFilter, Child[0]=TryGrappleRHI_Skirm, Param[0]=30)
; GrappleRHI when unsafe to move, also for scamper
+Behaviors=(BehaviorName=NotSafeToMove, NodeType=Inverter, Child[0]=IsSafeToMove)
+Behaviors=(BehaviorName=GrappleRHIWhenUnsafe, NodeType=Sequence, Child[0]=NotSafeToMove, Child[1]=TryGrappleRHI_Skirm)
; Run and Gun
+Behaviors=(BehaviorName=TryRunAndGun, NodeType=Sequence, Child[0]=IsAbilityAvailable-RunAndGun, Child[1]=SelectAbility-RunAndGun)
+Behaviors=(BehaviorName=IsAbilityAvailable-RunAndGun, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RunAndGun, NodeType=Action)

;JusticeRhi. Use it to pick on the weak (=Disoriented, confused, panicked, stunned). This should work nicely in tandem with their Flashbang grenade or the ChanceRHI to stun on their ripjack.
+Behaviors=(BehaviorName=TryJusticeRhi_PickOnTheWeak, NodeType=Sequence, Child[0]=IsAbilityAvailable-JusticeRhi, Child[1]=SelectWeakTarget_RHI, Child[2]=SelectAbility-JusticeRhi)
+Behaviors=(BehaviorName=SelectWeakTarget_RHI, NodeType=Sequence, Child[0]=SetTargetStack-JusticeRhi, Child[1]=EvaluateWeakTargets_RHI, Child[2]=HasValidTarget-JusticeRhi)
+Behaviors=(BehaviorName=EvaluateWeakTargets_RHI, NodeType=RepeatUntilFail, Child[0]=EvaluateWeakEnemies_RHI)
+Behaviors=(BehaviorName=EvaluateWeakEnemies_RHI, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreWeakEnemy_RHI, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreWeakEnemy_RHI, NodeType=Successor, Child[0]=ScoreWeakEnemy_RHI)
+Behaviors=(BehaviorName=ScoreWeakEnemy_RHI, NodeType=Sequence, Child[0]=TargetIsWeak, Child[1]=TargetIsEnemy, Child[2]=TargetNotMindControlled, Child[3]=TargetHitChanceNotLow, Child[4]=TargetNotBound, Child[5]=TargetNotSacrificeProtected, Child[6]=ScoreByHP)
+Behaviors=(BehaviorName=TargetIsWeak, NodeType=Selector, Child[0]=TargetAffectedByEffect-Confused, Child[1]=TargetAffectedByEffect-Panicked, Child[2]=TargetAffectedByEffect-Disoriented)
;More JusticeRhi. An excellent way to remove Overwatchers and Suppressors.
+Behaviors=(BehaviorName=TryJusticeRhi_OW, NodeType=Sequence, Child[0]=IsAbilityAvailable-JusticeRhi, Child[1]=SelectAbility-JusticeRhi)
+Behaviors=(BehaviorName=TryJusticeRhi_Sup, NodeType=Sequence, Child[0]=IsAbilityAvailable-JusticeRhi, Child[1]=SelectAbility-JusticeRhi)
;Standard JusticeRhi use. Will only be used sparingly.
+Behaviors=(BehaviorName=TryJusticeRhi_Rand30, NodeType=RandFilter, Child[0]=TryJusticeRhi, Param[0]=30)
+Behaviors=(BehaviorName=TryJusticeRhi_Rand60, NodeType=RandFilter, Child[0]=TryJusticeRhi, Param[0]=60)

;Tying the Justice stuff together in a tidy package to put into the first action selector
+Behaviors=(BehaviorName=TryJusticeRhi_Rhi, NodeType=Selector, Child[0]=TryJusticeRhi_OW, Child[1]=TryJusticeRhi_Sup, Child[2]=TryJusticeRhi_PickOnTheWeak, Child[3]=TryJusticeRhi_Rand30)

;Other Skirmisher stuff
+Behaviors=(BehaviorName=MaybeMelee70, NodeType=RandFilter, Child[0]=TryStandardMeleeDash, Param[0]=70)
+Behaviors=(BehaviorName=MaybeMelee40, NodeType=RandFilter, Child[0]=TryStandardMeleeDash, Param[0]=40)

+Behaviors=(BehaviorName=WasLastAbility-SkirmisherGrappleRHI, NodeType=Condition)
+Behaviors=(BehaviorName=WasLastAbility-SkirmisherMelee, NodeType=Condition)
+Behaviors=(BehaviorName=WasLastAbility-JusticeRhi, NodeType=Condition)
+Behaviors=(BehaviorName=WasLastAbility-RunAndGun, NodeType=Condition)

+Behaviors=(BehaviorName=FindRestrictedDestination-MWP_GrappleRHISkirm, NodeType=Action)

+Behaviors=(BehaviorName=ShootWhenFlanking, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget_RHI, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_RHI, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateFlankedEnemyTargets_RHI, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateFlankedEnemyTargets_RHI, NodeType=RepeatUntilFail, Child[0]=EvaluateFlankedEnemies_RHI)
+Behaviors=(BehaviorName=EvaluateFlankedEnemies_RHI, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreFlankedEnemy_RHI, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreFlankedEnemy_RHI, NodeType=Successor, Child[0]=ScoreFlankedEnemy_RHI)
+Behaviors=(BehaviorName=ScoreFlankedEnemy_RHI, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetNotMindControlled, Child[3]=TargethitchanceNotLow, Child[4]=TargetNotBound, Child[5]=TargetNotSacrificeProtected, Child[6]=GenericTargetEvaluations)
+Behaviors=(BehaviorName=TargetNotBound, NodeType=Inverter, Child[0]=TargetAffectedByEffect-Bind)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Bind, NodeType=Condition)

+Behaviors=(BehaviorName=TargetAffectedByEffect-Confused, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Panicked, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Disoriented, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Berserk, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Shattered, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Dazed, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-DLC_3SacrificeShield, NodeType=Condition)
+Behaviors=(BehaviorName=TargetNotSacrificeProtected, NodeType=Inverter, Child[0]=TargetAffectedByEffect-DLC_3SacrificeShield)

+Behaviors=(BehaviorName=TryToCounterflank, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=FindDestinationWithLoS-MWP_Defensive, Child[4]=SelectAbility-StandardMove)



+Behaviors=(BehaviorName=TargethitchanceNotLow, NodeType=Inverter, Child[0]=TargethitchanceLow) ; <-- CTH > 40
;+Behaviors=(BehaviorName=TargethitchanceNotHigh, NodeType=Inverter, Child[0]=TargethitchanceHigh) ; <-- CTH < 80

+Behaviors=(BehaviorName=ShootWhenKillShot_Rhi, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectKillShotEnemyTarget_RHI, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_RHI, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateKillShotEnemyTargets_RHI, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateKillShotEnemyTargets_RHI, NodeType=RepeatUntilFail, Child[0]=EvaluateKillShotEnemies_RHI)
+Behaviors=(BehaviorName=EvaluateKillShotEnemies_RHI, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreKillShotEnemy_RHI, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreKillShotEnemy_RHI, NodeType=Successor, Child[0]=ScoreKillShotEnemy_RHI)
+Behaviors=(BehaviorName=ScoreKillShotEnemy_RHI, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=TargetIsEnemy, Child[2]=TargetNotMindControlled, Child[3]=TargethitchanceNotLow, Child[4]=TargetNotBound, Child[5]=TargetNotSacrificeProtected, Child[6]=GenericTargetEvaluations)

;Took some inspiration from Reality's AI lines for phantoms
+Behaviors=(BehaviorName="RhiSniperReaperRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=RhiSniperReaper_RedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=RhiSniperReaper_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=RhiSniperReaper_RedAbilitySelector)
+Behaviors=(BehaviorName=RhiSniperReaper_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=RhiSniperReaperRedFirstAction, Child[2]=RhiSniperReaperRedLastAction)

+Behaviors=(BehaviorName=RhiSniperReaperRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=RhiSniperReaperRedFirstActionSelector)
; Update - removed stand-alone MoveAggressive since it should be linked with the desired ability to be used.

+Behaviors=(BehaviorName=RhiSniperReaperRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=SelectMoveProfileByJob, \\
	Child[2]=TryRhiDeadEye, \\
	Child[3]=TryShootOrReloadOrOverwatch_Rhi, \\
	Child[4]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=RhiSniperReaperRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=RhiSniperReaperRedLastActionSelector)
+Behaviors=(BehaviorName=RhiSniperReaperRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryRhiRemoteFuse, \\
	Child[1]=TryRhiDeadEye, \\
	Child[2]=TryShootOrReloadOrOverwatch_Rhi, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrAggressive) 

+Behaviors=(BehaviorName="RhiReaperRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=RhiReaper_RedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=RhiReaper_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=RhiReaper_RedAbilitySelector)
+Behaviors=(BehaviorName=RhiReaper_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=RhiReaperRedFirstAction, Child[2]=RhiReaperRedLastAction)

+Behaviors=(BehaviorName=RhiReaperRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=RhiReaperRedFirstActionSelector)
; Update - removed stand-alone MoveAggressive since it should be linked with the desired ability to be used.

+Behaviors=(BehaviorName=RhiReaperRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=SelectMoveProfileByJob, \\
	Child[2]=TryShootOrReloadOrOverwatch_Rhi, \\
	Child[3]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=RhiReaperRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=RhiReaperRedLastActionSelector)
+Behaviors=(BehaviorName=RhiReaperRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryRhiRemoteFuse, \\
	Child[1]=TryShootOrReloadOrOverwatch_Rhi, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrAggressive) 

;RhiRemoteFuse
+Behaviors=(BehaviorName=TryRhiRemoteFuse, NodeType=Sequence, Child[0]=IsAbilityAvailable-RhiRemoteFuse, Child[1]=NotLastEnemy, Child[2]=SelectTargetForRhiRemoteFuse, Child[3]=SelectAbility-RhiRemoteFuse) 
+Behaviors=(BehaviorName=IsAbilityAvailable-RhiRemoteFuse, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForRhiRemoteFuse, NodeType=Sequence, Child[0]=SetTargetStack-RhiRemoteFuse, Child[1]=IterateTargetsForRhiRemoteFuse, Child[2]=HasValidTarget-RhiRemoteFuse)
+Behaviors=(BehaviorName=SetTargetStack-RhiRemoteFuse, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForRhiRemoteFuse, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForRhiRemoteFuse)
+Behaviors=(BehaviorName=IterateNextTargetForRhiRemoteFuse, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForRhiRemoteFuse, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForRhiRemoteFuse, NodeType=Successor, Child[0]=EvaluateForRhiRemoteFuse)
+Behaviors=(BehaviorName=EvaluateForRhiRemoteFuse, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetNotMindControlled, Child[3]=TargetIsEnemy, Child[4]=TargetIsNotEnemyVIP, Child[5]=TargetNotBoundOrPanicked, Child[6]=TargetIsAttackable, Child[7]=TargetScoreByScaledDistance-1, Child[8]=AddToTargetScore_100, Child[9]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-RhiRemoteFuse, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RhiRemoteFuse, NodeType=Action)

;DeadEye
+Behaviors=(BehaviorName=IsAbilityAvailable-Deadeye, NodeType=Condition)
	
+Behaviors=(BehaviorName=SelectAbility-Deadeye, NodeType=Action)	
	
+Behaviors=(BehaviorName=SetTargetStack-Deadeye, NodeType=Action)	
	
+Behaviors=(BehaviorName=HasValidTarget-Deadeye, NodeType=Condition)
	
+Behaviors=(BehaviorName=TryRhiDeadeye, NodeType=Sequence, Child[0]=IsAbilityAvailable-Deadeye, Child[1]=SelectTargetForGOCDeadeye, Child[2]=SelectAbility-Deadeye)
		
+Behaviors=(BehaviorName=SelectTargetForGOCDeadeye, NodeType=Sequence, Child[0]=SetTargetStack-Deadeye, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Deadeye)