[XComGame.XGAIBehavior]
+m_arrMoveWeightProfile=(Profile=Flanking, fCoverWeight=1.5f, fDistanceWeight=1.0f, fFlankingWeight=6.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=3.0, fAllyVisWeight=1.0f, fCloseModifier=0.9f, fFarModifier=1.1f)

+AoEProfiles=( Profile=RocketLauncherProfile_prio, Ability=RocketLauncher, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLos=1)
+AoEProfiles=( Profile=RocketLauncherProfile_norm, Ability=RocketLauncher, bUsePrecomputePath=1, bRequireLos=1) 
+AoEProfiles=( Profile=RocketLauncherProfile_aggro, Ability=RocketLauncher, bUsePrecomputePath=1, MinTargets=1, bRequireLos=1) 
+AoEProfiles=( Profile=GrenadeLauncherProfile_prio, Ability=LaunchGrenade, bUsePrecomputePath=1, MinTargets=3, bRequireLos=1)
+AoEProfiles=( Profile=GrenadeLauncherProfile_norm, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLos=1)
+AoEProfiles=( Profile=GrenadeLauncherProfile_aggro, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLos=1)
+AoEProfiles=( Profile=CapacitorDischargeAOE, Ability=CapacitorDischarge, bUsePrecomputePath=1, MinTargets=2, bRequireLos=1) 
+AoEProfiles=( Profile=GrenadeSingleProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLos=1)
+AoEProfiles=( Profile=KillzoneProfile, Ability=KillZone, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bFailOnFriendlyFire=false, MinTargets=2)
+AoEProfiles=( Profile=SaturationFireProfile, Ability=SaturationFire, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bFailOnFriendlyFire=false)

;psi agent stuff
+AoEProfiles=( Profile=VoidRiftProfile, Ability=VoidRift, MinTargets=2, bFailOnFriendlyFire=1, bFailOnObjectiveFire=False)

+m_arrMoveWeightProfile=(Profile=StayBack, fCoverWeight=2.0f, fDistanceWeight=0.6f, fFlankingWeight=0.1f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=0.3f, fCloseModifier=0.2f, fFarModifier=1.3f) 

+m_arrMoveWeightProfile=(Profile=RM_FanaticRunAndGun, fCoverWeight=0.5f, fDistanceWeight=5.0f, fFlankingWeight=5.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=3.0, fAllyVisWeight=0.5f, fCloseModifier=1.1f, fFarModifier=0.9f)  

[XComGame.X2AIBTBehaviorTree]
+CustomNodes=(NodeTypeString="DarkXCOMCondition", ExtendsFromType="Condition", ClassName="DarkXCOMRedux.X2AIBT_DarkXCOM_Conditions")
+EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=SkirmisherMelee)
+EquivalentAbilities=( KeyName=Overwatch, EquivalentAbilityName[0]=LongWatch)

; ---------------- RedAlert Fallback actions for various types --------------------------------------------
; Note: These nodes use the bare 'RandOverwatchXX' that only test if the overwatch ability is active, it does no scoring
; based on to-hit chances (which will often fail the node entirely if the unit can see no enemies or the standard shot action
; is disabled for some reason). This is important to get AI to overwatch when they have nothing else to do.
+Behaviors=(BehaviorName=AdventRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=DoCower, Child[2]=SkipMove)
+Behaviors=(BehaviorName=MECRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=SkipMove)
+Behaviors=(BehaviorName=AlienRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=SkipMove)

+Behaviors=(BehaviorName=FindDestinationWithLoS-Flanking, NodeType=Action)
;-------------- High priority target shooting (shoot if kill or target flanked/exposed) ------------- FOR SNIPERS
+Behaviors=(BehaviorName=TryHighPriorityShot_Sniper, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperStandardFire, Child[1]=HaveHighPriorityTarget_Sniper, Child[2]=SnipeIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityTarget_Sniper, NodeType=Sequence, Child[0]=SetTargetStack-SniperStandardFire, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-SniperStandardFire)


; ------------------ Fanatic Run And Gun Movement ----------------------------------
+Behaviors=(BehaviorName=FindDestinationWithLoS-RM_FanaticRunAndGun, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-RM_FanaticRunAndGun, NodeType=Action)
+Behaviors=(BehaviorName=FindDestination-RM_FanaticRunAndGun, NodeType=Action)

; -------------- High priority target shooting (shoot if kill or target flanked/exposed) -------------
+Behaviors=(BehaviorName=TryHighPriorityShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=HaveHighPriorityTarget, Child[2]=ShootIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=FindHighPriorityTarget, NodeType=RepeatUntilFail, Child[0]=NotHighPriorityEvaluateTarget)
+Behaviors=(BehaviorName=NotHighPriorityEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsNotHighPriority)
+Behaviors=(BehaviorName=TargetIsNotHighPriority, NodeType=Inverter, Child[0]=TargetIsHighPriority)
+Behaviors=(BehaviorName=TargetIsHighPriority, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetKillableOrFlanked, Child[3]=AddToTargetScore_1000, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetKillableOrFlanked, NodeType=Selector, Child[0]=TargetIsKillable,  Child[1]=IsFlankingTarget)

; -------------- Killshot target shooting (shoot if kill) -------------
+Behaviors=(BehaviorName=TryKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=HaveKillShotTarget, Child[2]=ShootIfAvailable)
+Behaviors=(BehaviorName=HaveKillShotTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FindKillShotTarget)
+Behaviors=(BehaviorName=FindKillShotTarget, NodeType=RepeatUntilFail, Child[0]=NotKillShotEvaluateTarget)
+Behaviors=(BehaviorName=NotKillShotEvaluateTarget, NodeType=Inverter, Child[0]=KillShotEvaluateTarget)
+Behaviors=(BehaviorName=KillShotEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsKillShot)
+Behaviors=(BehaviorName=TargetIsKillShot, NodeType=Sequence, Child[0]=TargetIsKillable)

; ---------------- LightEmUp (MutonM3_LW, Elite) --------------------------------------------
+Behaviors=(BehaviorName=IsAbilityAvailable-LightEmUp, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LightEmUp, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LightEmUp, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LightEmUp, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-LightEmUp, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LightEmUp, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LightEmUp, NodeType=Action)


; +++ Actions
; ++ Movement
; + StayBack movement profile, for Snipers, Puppeteers and other support units
+Behaviors=(BehaviorName=FindDestinationWithLoS-StayBack, NodeType=Action)
+Behaviors=(BehaviorName=MoveStayBack, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveStayBackUnsafe)
+Behaviors=(BehaviorName=MoveStayBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-StayBack, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=DoIfFlankedMove_StayBack, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=MoveStayBack)
; + Moving into Flanks. Uses the Flanking profile and a hard restriction to tiles that lead to a flank.
+Behaviors=(BehaviorName=TryMoveIntoFlank, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=FindDestinationWithLoS-Flanking, Child[4]=SelectAbility-StandardMove)
; ++ Ability Use
; + Basic Sniper fire
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_Sniper, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable_Sniper, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ShootIfAvailable_Sniper, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperStandardFire, Child[1]=SelectTargetForSniperStandardFire, Child[2]=SelectAbility-SniperStandardFire)
+Behaviors=(BehaviorName=IsAbilityAvailable-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForSniperStandardFire, NodeType=Sequence, Child[0]=SetTargetStack-SniperStandardFire, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-SniperStandardFire)
+Behaviors=(BehaviorName=SelectAbility-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-SniperStandardFire, NodeType=Condition)
; + Grenade, single target

; +++ Using Hunker Down ("CheckForHunker" is the one for the AI trees)
; Random actions
+Behaviors=(BehaviorName=MaybeHunker10, NodeType=RandFilter, Child[0]=TryCower, Param[0]=10)
+Behaviors=(BehaviorName=MaybeHunker25, NodeType=RandFilter, Child[0]=TryCower, Param[0]=25)
+Behaviors=(BehaviorName=MaybeHunker50, NodeType=RandFilter, Child[0]=TryCower, Param[0]=50)
+Behaviors=(BehaviorName=MaybeHunker75, NodeType=RandFilter, Child[0]=TryCower, Param[0]=75)
+Behaviors=(BehaviorName=MaybeHunker90, NodeType=RandFilter, Child[0]=TryCower, Param[0]=90)
; No Hunkering when VIP or Evac is in sight. No Hunkering when it's the last enemy on the board.
+Behaviors=(BehaviorName=CheckForHunker, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=NotNearEvacOrVIP, Child[2]=ConsiderHunker)
+Behaviors=(BehaviorName=NoVIPVisible, NodeType=Inverter, Child[0]=VIPVisible)
+Behaviors=(BehaviorName=NoEvacVisible, NodeType=Inverter, Child[0]=EvacWithinVisRange)
+Behaviors=(BehaviorName=NotNearEvacOrVIP, NodeType=Sequence, Child[0]=NoVIPVisible, Child[1]=NoEvacVisible)
; All conditions together, to be linked into "CheckForHunker". 
+Behaviors=(BehaviorName=ConsiderHunker, NodeType=Selector, Child[0]=HunkerWhenDisoriented, Child[1]=HunkerWhenWounded)
; Hunker chance if disoriented. Default 75 percent
+Behaviors=(BehaviorName=HunkerWhenDisoriented, NodeType=Sequence, Child[0]=AffectedByEffect-Disoriented, Child[1]=MaybeHunker75)
; Hunker chance when wounded.
+Behaviors=(BehaviorName=HunkerWhenWounded, NodeType=Selector, Child[0]=HunkerWhenBloodied, Child[1]=HunkerWhenLowHP)
+Behaviors=(BehaviorName=HunkerWhenBloodied, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=NotLowHP, Child[2]=MaybeHunker25)
+Behaviors=(BehaviorName=HunkerWhenLowHP, NodeType=Sequence, Child[0]=HasLowHP, Child[1]=MaybeHunker50)

; +++ Reacting to suppression
; Am i suppressed?
+Behaviors=(BehaviorName=CheckForSuppressionOnMe, NodeType=Sequence, Child[0]=AffectedByEffect-Suppression, Child[1]=DealWithSuppressionOnMe)
; What are my options? Skill use. Run the Suppression. Hunker Down. Shoot. If all of the previous fail, move by default.
+Behaviors=(BehaviorName=DealWithSuppressionOnMe, NodeType=Selector, Child[0]=UseSkillsWSOM, Child[1]=RunTheSuppression, Child[2]=HunkerDownWSOM, Child[3]=TakeTheShotWSOM, Child[4]=MovementWSOM)
; What skills can i use? Stuff that doesn't use chance to hit. Grenades. Mark Target. Psi. All kinds of stuff. No random roll here, if he has it, he uses it.
+Behaviors=(BehaviorName=UseSkillsWSOM, NodeType=Selector, Child[0]=TryExplosive_JustHitSomething)
; Should i run the suppression? Base chance 30 percent. Additional 50% rolls for max health and for 20+ dodge. Running suppression is defensive UNLESS it can lead to a flank.
+Behaviors=(BehaviorName=RunTheSuppression, NodeType=Selector, Child[0]=RunBecauseFullHP, Child[1]=RunBecauseDodge, Child[2]=MovementWSOM30)
+Behaviors=(BehaviorName=RunBecauseFullHP, NodeType=Sequence, Child[0]=HasFullHP, Child[1]=MovementWSOM50)
+Behaviors=(BehaviorName=RunBecauseDodge, NodeType=Sequence, Child[0]=IsDodgy, Child[1]=MovementWSOM50)
+Behaviors=(BehaviorName=MovementWSOM, NodeType=Selector, Child[0]=TryMoveIntoFlank, Child[1]=MoveDefensive)
+Behaviors=(BehaviorName=MovementWSOM10, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=10)
+Behaviors=(BehaviorName=MovementWSOM30, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=30)
+Behaviors=(BehaviorName=MovementWSOM50, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=50)
+Behaviors=(BehaviorName=MovementWSOM70, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=70)
+Behaviors=(BehaviorName=MovementWSOM90, NodeType=RandFilter, Child[0]=MovementWSOM, Param[0]=90)
; Should i Hunker? Base chance 25 percent. TODO: Additional 50% roll for being an easy target. 
+Behaviors=(BehaviorName=HunkerDownWSOM, NodeType=Selector, Child[0]=MaybeHunker25)
; Should i shoot? Base chance 30 percent. Chance for priority shots is higher.
+Behaviors=(BehaviorName=TakeTheShotWSOM, NodeType=Selector, Child[0]=FlankshotWSOM, Child[1]=KillshotWSOM, Child[2]=SureShotWSOM, Child[3]=StandardShotWSOM)
+Behaviors=(BehaviorName=FlankshotWSOM, NodeType=RandFilter, Child[0]=ShootWhenFlanking, Param[0]=60)
+Behaviors=(BehaviorName=KillshotWSOM, NodeType=RandFilter, Child[0]=ShootWhenKillshot, Param[0]=60)
+Behaviors=(BehaviorName=SureShotWSOM, NodeType=RandFilter, Child[0]=ShootWhenSureShot, Param[0]=70)
+Behaviors=(BehaviorName=StandardShotWSOM, NodeType=RandFilter, Child[0]=TryShootOrReloadOrOverwatch_ABA, Param[0]=30)

; Hit Chance based Conditions
+Behaviors=(BehaviorName=AllHitChancesBelow10, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="10")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow10, NodeType=Inverter, Child[0]=AllHitChancesBelow10)
+Behaviors=(BehaviorName=AllHitChancesBelow25, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="25")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow25, NodeType=Inverter, Child[0]=AllHitChancesBelow25)
+Behaviors=(BehaviorName=AllHitChancesBelow50, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="50")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow50, NodeType=Inverter, Child[0]=AllHitChancesBelow50)
+Behaviors=(BehaviorName=AllHitChancesBelow75, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="75")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow75, NodeType=Inverter, Child[0]=AllHitChancesBelow75)
+Behaviors=(BehaviorName=AllHitChancesBelow90, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="90")
+Behaviors=(BehaviorName=NOTAllHitChancesBelow90, NodeType=Inverter, Child[0]=AllHitChancesBelow90)
; Target specific Hit Chance Conditions
; First two are already in Vanilla, must stay commented out!
;Behaviors=(BehaviorName=TargetHitChanceLow, NodeType=Condition)   <-- CTH < 40
;Behaviors=(BehaviorName=TargetHitChanceHigh, NodeType=Condition)  <-- CTH > 80
+Behaviors=(BehaviorName=TargetHitChanceNotLow, NodeType=Inverter, Child[0]=TargetHitChanceLow) ; <-- CTH > 40
+Behaviors=(BehaviorName=TargetHitChanceNotHigh, NodeType=Inverter, Child[0]=TargetHitChanceHigh) ; <-- CTH < 80

; +++ Conditions 
; Effects on Target
+Behaviors=(BehaviorName=TargetAffectedByEffect-Overwatch, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Bind, NodeType=Condition)
+Behaviors=(BehaviorName=TargetNotBound, NodeType=Inverter, Child[0]=TargetAffectedByEffect-Bind)
; Effects on self
+Behaviors=(BehaviorName=AffectedByEffect-Disoriented, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Suppression, NodeType=Condition)
+Behaviors=(BehaviorName=NotSuppressed, NodeType=Inverter, Child[0]=AffectedByEffect-Suppression)
+Behaviors=(BehaviorName=AffectedByEffect-Stealth, NodeType=Condition)
+Behaviors=(BehaviorName=NotStealthed, NodeType=Inverter, Child[0]=AffectedByEffect-Stealth)
+Behaviors=(BehaviorName=HasFullHP, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="100%")
+Behaviors=(BehaviorName=IsDodgy, NodeType=StatCondition, Param[0]=eStat_Dodge, Param[1]=">=", Param[2]="20")


; All conditions together, to be linked into "CheckForHunker". 
+Behaviors=(BehaviorName=ConsiderHunker, NodeType=Selector, Child[0]=HunkerWhenDisoriented, Child[1]=HunkerWhenWounded)
; Hunker chance if disoriented. Default 75 percent
+Behaviors=(BehaviorName=HunkerWhenDisoriented, NodeType=Sequence, Child[0]=AffectedByEffect-Disoriented, Child[1]=MaybeHunker75)
; Hunker chance when wounded.
+Behaviors=(BehaviorName=HunkerWhenWounded, NodeType=Selector, Child[0]=HunkerWhenBloodied, Child[1]=HunkerWhenLowHP)
+Behaviors=(BehaviorName=HunkerWhenBloodied, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=NotLowHP, Child[2]=MaybeHunker25)
+Behaviors=(BehaviorName=HunkerWhenLowHP, NodeType=Sequence, Child[0]=HasLowHP, Child[1]=MaybeHunker50)

; +++ Grenades and other Explosives
; ++ Throw single target grenade when only bad shots (<50%) available
+Behaviors=(BehaviorName=TryGrenadeSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-GrenadeSingleProfile, Child[2]=SelectAoETarget-GrenadeSingleProfile, Child[3]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryGrenadeSingleOnBadShot, NodeType=Sequence, Child[0]=AllHitChancesBelow50, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-GrenadeSingleProfile, Child[3]=SelectAoETarget-GrenadeSingleProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryGrenade_Aggressive, NodeType=Selector, Child[0]=TryGrenade, Child[1]=TryGrenadeSingleOnBadShot)
+Behaviors=(BehaviorName=TryGrenade_JustHitSomething, NodeType=Selector, Child[0]=TryGrenade, Child[1]=TryGrenadeSingle)
; ++ Rocket Launcher
+Behaviors=(BehaviorName=TryRocketLauncher_prio, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile_prio, Child[2]=SelectAoETarget-RocketLauncherProfile_prio, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=TryRocketLauncher_norm, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile_norm, Child[2]=SelectAoETarget-RocketLauncherProfile_norm, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=TryRocketLauncher_aggro, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile_aggro, Child[2]=SelectAoETarget-RocketLauncherProfile_aggro, Child[3]=SelectAbility-RocketLauncher)
; ++ Grenade Launcher
+Behaviors=(BehaviorName=TryGrenadeLauncher_prio, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile_prio, Child[2]=SelectAoETarget-GrenadeLauncherProfile_prio, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncher_norm, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile_norm, Child[2]=SelectAoETarget-GrenadeLauncherProfile_norm, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncher_aggro, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile_aggro, Child[2]=SelectAoETarget-GrenadeLauncherProfile_aggro, Child[3]=SelectAbility-LaunchGrenade)
; ++ Merging RocketLauncher, Grenadelauncher and Grenade(aggressive) into one Behavior
+Behaviors=(BehaviorName=TryExplosive_prio, NodeType=Selector, Child[0]=TryRocketLauncher_prio, Child[1]=TryGrenadeLauncher_prio) 
+Behaviors=(BehaviorName=TryExplosive_norm, NodeType=Selector, Child[0]=TryRocketLauncher_norm, Child[1]=TryGrenadeLauncher_norm, Child[2]=TryGrenade) 
+Behaviors=(BehaviorName=TryExplosive_aggro, NodeType=Selector, Child[0]=TryRocketLauncher_aggro, Child[1]=TryGrenadeLauncher_aggro, Child[2]=TryGrenade_Aggressive) 
+Behaviors=(BehaviorName=TryExplosive_JustHitSomething, NodeType=Selector, Child[0]=TryRocketLauncher_aggro, Child[1]=TryGrenadeLauncher_aggro, Child[2]=TryGrenade_JustHitSomething) 

; + Rocket Launcher
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-RocketLauncher, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RocketLauncher, NodeType=Action)

+Behaviors=(BehaviorName=DoCowerNoAnim, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunkerDownNoAnim, Child[1]=SelectAbility-HunkerDownNoAnim)
+Behaviors=(BehaviorName=TryCower, NodeType=Selector, Child[0]=DoCower, Child[1]=DoCowerNoAnim)
+Behaviors=(BehaviorName=IsAbilityAvailable-HunkerDownNoAnim, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-HunkerDownNoAnim, NodeType=Action)

; + Grenade, single target
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeSingleProfile, NodeType=Action)
; + Grenade Launcher

+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-LaunchGrenade, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LaunchGrenade, NodeType=Action)
+Behaviors=(BehaviorName=MaybeHunker10, NodeType=RandFilter, Child[0]=TryCower, Param[0]=10)
+Behaviors=(BehaviorName=MaybeHunker25, NodeType=RandFilter, Child[0]=TryCower, Param[0]=25)
+Behaviors=(BehaviorName=MaybeHunker50, NodeType=RandFilter, Child[0]=TryCower, Param[0]=50)
+Behaviors=(BehaviorName=MaybeHunker75, NodeType=RandFilter, Child[0]=TryCower, Param[0]=75)
+Behaviors=(BehaviorName=MaybeHunker90, NodeType=RandFilter, Child[0]=TryCower, Param[0]=90)


; CTH<10
+Behaviors=(BehaviorName=RandOverwatchAtCTH10First, NodeType=RandFilter, Child[0]=TryOverwatch10MaybeHunker90, Param[0]=90)
+Behaviors=(BehaviorName=RandOverwatchAtCTH10Second, NodeType=RandFilter, Child[0]=TryOverwatch10MaybeHunker90, Param[0]=75)
+Behaviors=(BehaviorName=RandOverwatchAtCTH10Third, NodeType=RandFilter, Child[0]=TryOverwatch10MaybeHunker90, Param[0]=50)
; CTH<25
+Behaviors=(BehaviorName=RandOverwatchAtCTH25First, NodeType=RandFilter, Child[0]=TryOverwatch30MaybeHunker70, Param[0]=75)
+Behaviors=(BehaviorName=RandOverwatchAtCTH25Second, NodeType=RandFilter, Child[0]=TryOverwatch30MaybeHunker70, Param[0]=60)
+Behaviors=(BehaviorName=RandOverwatchAtCTH25Third, NodeType=RandFilter, Child[0]=TryOverwatch30MaybeHunker70, Param[0]=40)
; CTH<50
+Behaviors=(BehaviorName=RandOverwatchAtCTH50First, NodeType=RandFilter, Child[0]=TryOverwatch65MaybeHunker35, Param[0]=25)
+Behaviors=(BehaviorName=RandOverwatchAtCTH50Second, NodeType=RandFilter, Child[0]=TryOverwatch65MaybeHunker35, Param[0]=15)
+Behaviors=(BehaviorName=RandOverwatchAtCTH50Third, NodeType=RandFilter, Child[0]=TryOverwatch65MaybeHunker35, Param[0]=5)
; CTH<75
+Behaviors=(BehaviorName=RandOverwatchAtCTH75First, NodeType=RandFilter, Child[0]=TryOverwatch90MaybeHunker10, Param[0]=5)
+Behaviors=(BehaviorName=RandOverwatchAtCTH75Second, NodeType=RandFilter, Child[0]=TryOverwatch90MaybeHunker10, Param[0]=3)
+Behaviors=(BehaviorName=RandOverwatchAtCTH75Third, NodeType=RandFilter, Child[0]=TryOverwatch90MaybeHunker10, Param[0]=1)

; Compatibility with DLC3's Sacrifice ability
+Behaviors=(BehaviorName=TargetAffectedByEffect-DLC_3SacrificeShield, NodeType=Condition)
+Behaviors=(BehaviorName=TargetNotSacrificeProtected, NodeType=Inverter, Child[0]=TargetAffectedByEffect-DLC_3SacrificeShield)

; if the Overwatch Override triggers based on the random chance above, there is a second chance based check that can make the unit go into Hunker instead of Overwatch.
; There are 4 different probabilties for the Overwatch/Hunker chance and which one is used depends on the CTH bracket we just came from.
; If you want to change the probabilities, do not change the name in the front of the line, only edit the Param[0] and Param[1] values!

+Behaviors=(BehaviorName=TryOverwatch10MaybeHunker90, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=10,      Child[1]=TryCower, Param[1]=90)
+Behaviors=(BehaviorName=TryOverwatch30MaybeHunker70, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=30,      Child[1]=TryCower, Param[1]=70)
+Behaviors=(BehaviorName=TryOverwatch40MaybeHunker60, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=40,      Child[1]=TryCower, Param[1]=60)
+Behaviors=(BehaviorName=TryOverwatch65MaybeHunker35, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=65,      Child[1]=TryCower, Param[1]=35)
+Behaviors=(BehaviorName=TryOverwatch80MaybeHunker20, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=80,      Child[1]=TryCower, Param[1]=20)
+Behaviors=(BehaviorName=TryOverwatch90MaybeHunker10, NodeType=RandSelector,      Child[0]=TryOverwatch, Param[0]=90,      Child[1]=TryCower, Param[1]=10)


; +++ The Overwatch Override
; Turns Attacks into Overwatches (with random roll, based on hit chance)
; Use Overwatch Override only on enemy turn - we don't want enemies to go into Overwatch when triggered by Prime reactions
+Behaviors=(BehaviorName=OverwatchOverride, NodeType=Sequence, Child[0]=NotActiveTeamXCom, Child[1]=OverwatchOverrideStart)
; ++ Forking Overwatch chances by Hit Chance
+Behaviors=(BehaviorName=OverwatchOverrideStart, NodeType=Selector, Child[0]=OverwatchOverride10, Child[1]=OverwatchOverride25, Child[2]=OverwatchOverride50, Child[3]=OverwatchOverride75, Child[4]=OverwatchOverrideNVE)
+Behaviors=(BehaviorName=OverwatchOverride10, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow10, Child[2]=RandOverwatchAtCTH10)
+Behaviors=(BehaviorName=OverwatchOverride25, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow25, Child[2]=NOTAllHitChancesBelow10, Child[3]=RandOverwatchAtCTH25)
+Behaviors=(BehaviorName=OverwatchOverride50, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow50, Child[2]=NOTAllHitChancesBelow25, Child[3]=RandOverwatchAtCTH50)
+Behaviors=(BehaviorName=OverwatchOverride75, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=AllHitChancesBelow75, Child[2]=NOTAllHitChancesBelow50, Child[3]=RandOverwatchAtCTH75)
+Behaviors=(BehaviorName=OverwatchOverrideNVE, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=RandOverwatch75)
; ++ Forking Overwatch Chances by number of other Overwatchers
; CTH <10
+Behaviors=(BehaviorName=RandOverwatchAtCTH10, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH10, Child[1]=RandSecondOverwatchAtCTH10, Child[2]=RandThirdOverwatchAtCTH10)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH10, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH10First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH10, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH10Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH10, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH10Third)
; CTH <25
+Behaviors=(BehaviorName=RandOverwatchAtCTH25, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH25, Child[1]=RandSecondOverwatchAtCTH25, Child[2]=RandThirdOverwatchAtCTH25)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH25, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH25First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH25, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH25Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH25, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH25Third)
; CTH <50
+Behaviors=(BehaviorName=RandOverwatchAtCTH50, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH50, Child[1]=RandSecondOverwatchAtCTH50, Child[2]=RandThirdOverwatchAtCTH50)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH50, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH50First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH50, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH50Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH50, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH50Third)
; CTH <75
+Behaviors=(BehaviorName=RandOverwatchAtCTH75, NodeType=Selector, Child[0]=RandFirstOverwatchAtCTH75, Child[1]=RandSecondOverwatchAtCTH75, Child[2]=RandThirdOverwatchAtCTH75)
+Behaviors=(BehaviorName=RandFirstOverwatchAtCTH75, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatchAtCTH75First)
+Behaviors=(BehaviorName=RandSecondOverwatchAtCTH75, NodeType=Sequence, Child[0]=OneOverwatchingTeammate, Child[1]=RandOverwatchAtCTH75Second)
+Behaviors=(BehaviorName=RandThirdOverwatchAtCTH75, NodeType=Sequence, Child[0]=MultipleOverwatchingTeammates, Child[1]=RandOverwatchAtCTH75Third)

; +++ Force Overwatch, Turns Attacks <50%cth into Overwatches
+Behaviors=(BehaviorName=ForceOverwatch50, NodeType=Sequence, Child[0]=AllHitChancesBelow50, Child[1]=TryOverwatch)

; +++ Prio: Shoot when Flanking and CTH > 40
+Behaviors=(BehaviorName=ShootWhenFlanking, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateFlankedEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateFlankedEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateFlankedEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateFlankedEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreFlankedEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreFlankedEnemy_ABA, NodeType=Successor, Child[0]=ScoreFlankedEnemy_ABA)
+Behaviors=(BehaviorName=ScoreFlankedEnemy_ABA, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=TargetNotSacrificeProtected, Child[5]=GenericTargetEvaluations)


; +++ Prio: Shoot when KillShot and CTH > 40
+Behaviors=(BehaviorName=ShootWhenKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectKillShotEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateKillShotEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateKillShotEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateKillShotEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateKillShotEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreKillShotEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreKillShotEnemy_ABA, NodeType=Successor, Child[0]=ScoreKillShotEnemy_ABA)
+Behaviors=(BehaviorName=ScoreKillShotEnemy_ABA, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetHitChanceNotLow, Child[4]=TargetNotBound, Child[5]=TargetNotSacrificeProtected, Child[6]=GenericTargetEvaluations)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=ShootWhenSureShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectSureShotEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectSureShotEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateSureShotEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateSureShotEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateSureShotEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateSureShotEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSureShotEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSureShotEnemy_ABA, NodeType=Successor, Child[0]=ScoreSureShotEnemy_ABA)
+Behaviors=(BehaviorName=ScoreSureShotEnemy_ABA, NodeType=Sequence, Child[0]=TargetHitChanceHigh, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetNotBound, Child[4]=TargetNotSacrificeProtected, Child[5]=GenericTargetEvaluations)

; +++ Prio: Shoot an Overwatcher when CTH > 40
+Behaviors=(BehaviorName=ShootWhenOverwatcher, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectOverwatchingEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectOverwatchingEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateOverwatchingEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateOverwatchingEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateOverwatchingEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreOverwatchingEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreOverwatchingEnemy_ABA, NodeType=Successor, Child[0]=ScoreOverwatchingEnemy_ABA)
+Behaviors=(BehaviorName=ScoreOverwatchingEnemy_ABA, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Overwatch, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=GenericTargetEvaluations)

; +++ Shoot an Suppressor when CTH > 40
+Behaviors=(BehaviorName=ShootWhenSuppressor, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectSuppressingEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectSuppressingEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateSuppressingEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateSuppressingEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateSuppressingEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSuppressingEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSuppressingEnemy_ABA, NodeType=Successor, Child[0]=ScoreSuppressingEnemy_ABA)
+Behaviors=(BehaviorName=ScoreSuppressingEnemy_ABA, NodeType=Sequence, Child[0]=TargetIsApplyingEffect-Suppression, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=GenericTargetEvaluations)


+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_Adv, NodeType=Selector, Child[0]=HunkerWhenDisoriented, Child[1]=TryShootOrReloadOrOverwatch_ABA)
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_ABA, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=OverwatchOverride, Child[2]=ShootWhenKillShot, Child[3]=ShootWhenSuppressor, Child[4]=ShootWhenOverwatcher, Child[5]=ShootWhenSureShot, Child[6]=ConsiderTakingOverwatch, Child[7]=ShootIfAvailable, Child[8]=NeedsReload)

; +++ All Prio shots together
+Behaviors=(BehaviorName=TakePriorityShots, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=ShootWhenKillShot, Child[2]=ShootWhenSureShot)
+Behaviors=(BehaviorName=ShootPriorityTargets, NodeType=Selector, Child[0]=ShootWhenOverwatcher, Child[1]=ShootWhenSuppressor)

; + Lightning Hands
+Behaviors=(BehaviorName=IsAbilityAvailable-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=TryLightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=SelectTargetForLightningHands, Child[2]=SelectAbility-LightningHands)
+Behaviors=(BehaviorName=SelectTargetForLightningHands, NodeType=Sequence, Child[0]=SetTargetStack-LightningHands, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-LightningHands)

; + Faceoff
+Behaviors=(BehaviorName=IsAbilityAvailable-Faceoff, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Faceoff, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Faceoff, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-Faceoff, NodeType=Condition)
+Behaviors=(BehaviorName=TryFaceoff, NodeType=Sequence, Child[0]=IsAbilityAvailable-Faceoff, Child[1]=MoreThanTwoEnemiesVisible, Child[2]=SelectTargetForFaceoff, Child[3]=SelectAbility-Faceoff)
+Behaviors=(BehaviorName=SelectTargetForFaceoff, NodeType=Sequence, Child[0]=SetTargetStack-Faceoff, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Faceoff)


; PistolStandardShot and Fanfire
+Behaviors=(BehaviorName=HT_TryFanfire, NodeType=Sequence, Child[0]=IsAbilityAvailable-Fanfire, Child[1]=HT_SelectTargetForFanfire, Child[2]=SelectAbility-Fanfire)
+Behaviors=(BehaviorName=HT_SelectTargetForFanfire, NodeType=Sequence, Child[0]=SetTargetStack-Fanfire, Child[1]=SelectTarget_FavorableNonLostCivilianOrVIP, Child[2]=HasValidTarget-Fanfire)
+Behaviors=(BehaviorName=IsAbilityAvailable-Fanfire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Fanfire, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Fanfire, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-Fanfire, NodeType=Condition)



; Things in sight
+Behaviors=(BehaviorName=MoreThanTwoEnemiesVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">", Param[2]=2)
+Behaviors=(BehaviorName=LessThanTwoVisibleOverwatchers, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]="<", Param[2]="2")
+Behaviors=(BehaviorName=LessThanTwoVisibleSuppressors, NodeType=StatCondition, Param[0]=SuppressorCount, Param[1]="<", Param[2]="2")

;^
;|
;stuff from A Better Advent (thanks DerBk and others who helped make this!)
;|
;\/

; + Demolition
+Behaviors=(BehaviorName=IsAbilityAvailable-Demolition, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Demolition, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Demolition, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-Demolition, NodeType=Condition)
; + Chainshot
+Behaviors=(BehaviorName=IsAbilityAvailable-ChainShot, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ChainShot, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-ChainShot, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-ChainShot, NodeType=Condition)

; + Run And Gun
+Behaviors=(BehaviorName=TryRunAndGun, NodeType=Sequence, Child[0]=IsAbilityAvailable-RunAndGun, Child[1]=SelectAbility-RunAndGun)
+Behaviors=(BehaviorName=IsAbilityAvailable-RunAndGun, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RunAndGun, NodeType=Action)

+Behaviors=(BehaviorName=TryRaGDash, NodeType=Sequence, Child[0]=WasLastAbility-RunAndGun, Child[1]=RM_MoveFlankingUnsafe)
+Behaviors=(BehaviorName=WasLastAbility-RunAndGun, NodeType=Condition)
+Behaviors=(BehaviorName=RM_MoveFlankingUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestination-RM_FanaticRunAndGun, Child[3]=SelectAbility-StandardMove)

; Vanish
+Behaviors=(BehaviorName=TryVanish, NodeType=Sequence, Child[0]=IsAbilityAvailable-RM_Vanish, Child[1]=SelectAbility-RM_Vanish)
+Behaviors=(BehaviorName=IsAbilityAvailable-RM_Vanish, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RM_Vanish, NodeType=Action)

;Reaper
+Behaviors=(BehaviorName=TryReaper, NodeType=Sequence, Child[0]=IsAbilityAvailable-Reaper,  Child[1]=SelectTargetForReaperMelee, Child[2]=SelectAbility-Reaper)
+Behaviors=(BehaviorName=IsAbilityAvailable-Reaper, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Reaper, NodeType=Action)

+Behaviors=(BehaviorName=SelectTargetForKillMelee, NodeType=Sequence, Child[0]=SetTargetStack-StandardMelee, Child[1]=SelectBestTargetForKillMelee, Child[2]=HasValidTarget-StandardMelee)
+Behaviors=(BehaviorName=SelectBestTargetForKillMelee, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialKillMeleeTarget)
+Behaviors=(BehaviorName=EvaluatePotentialKillMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreKillShotEnemy_Clutch, Child[2]=UpdateBestTarget)

+Behaviors=(BehaviorName=TryReaperMelee, NodeType=Sequence, Child[0]=IsAbilityReady-StandardMelee, Child[1]=WasLastAbility-Reaper, Child[2]=ReaperMeleeStepSelector)
+Behaviors=(BehaviorName=WasLastAbility-Reaper, NodeType=Condition)

+Behaviors=(BehaviorName=ReaperMeleeStepSelector, NodeType=Selector, Child[0]=ReaperMeleeAttack, Child[1]=MoveMeleeIfFirstAbility)

+Behaviors=(BehaviorName=ReaperMeleeAttack, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMelee, Child[1]=SelectTargetForReaperMelee, Child[2]=SelectAbility-StandardMelee)
+Behaviors=(BehaviorName=SelectTargetForReaperMelee, NodeType=Sequence, Child[0]=SetTargetStack-StandardMelee, Child[1]=SelectBestTargetForReaperMelee, Child[2]=HasValidTarget-StandardMelee)
+Behaviors=(BehaviorName=SelectBestTargetForReaperMelee, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialReaperTarget)

+Behaviors=(BehaviorName=EvaluatePotentialReaperTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHitChanceFavorable, Child[2]=TargetScoreHealth, Child[3]=TargetScoreClosestIfInRange, Child[4]=AvoidBoundAndPanickedTargets, Child[5]=SSScoreTargetOutIfCivilian, Child[6]=SSScoreTargetOutIfEnemyVIP, Child[7]=SSScoreTargetOutIfLost, Child[8]=UpdateBestTarget)

; +++ Demolition
; Demo is used when a unit is in cover and difficult to hit (chance <65), but not completely impossible to hit. Max Hitchance needs between the two thresholds. If it is, the unit with best hitchance is chosen (usually, uses generic eval).
+Behaviors=(BehaviorName=TryDemolition, NodeType=Sequence, Child[0]=IsAbilityAvailable-Demolition, Child[1]=AllHitChancesBelowDemoThreshold, Child[2]=AllHitChancesOverDemoThreshold, Child[3]=SelectTargetForDemolition, Child[4]=SelectAbility-Demolition)
+Behaviors=(BehaviorName=AllHitChancesOverDemoThreshold, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="5")
+Behaviors=(BehaviorName=AllHitChancesBelowDemoThreshold, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="65")
+Behaviors=(BehaviorName=SelectTargetForDemolition, NodeType=Sequence, Child[0]=SetTargetStack-Demolition, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Demolition)

; +++ ChainShot
; Has a minimum hitchance because of the aim penalty.
+Behaviors=(BehaviorName=TryChainShot_ABA, NodeType=Sequence, Child[0]=IsAbilityAvailable-ChainShot, Child[1]=AllHitChancesOverChainShotThreshold, Child[2]=SelectTargetForChainShot, Child[3]=SelectAbility-ChainShot)
+Behaviors=(BehaviorName=AllHitChancesOverChainShotThreshold, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]=">", Param[2]="40")
+Behaviors=(BehaviorName=SelectTargetForChainShot, NodeType=Sequence, Child[0]=SetTargetStack-ChainShot, Child[1]=SelectTarget_FavorableNonLostCivilianOrVIP, Child[2]=HasValidTarget-ChainShot)



; + Clutch Shot
+Behaviors=(BehaviorName=IsAbilityAvailable-ClutchShot, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ClutchShot, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-ClutchShot, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-ClutchShot, NodeType=Condition)
+Behaviors=(BehaviorName=TryClutchShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-ClutchShot, Child[1]=SelectTargetForClutchShot, Child[2]=SelectAbility-ClutchShot)
+Behaviors=(BehaviorName=SelectTargetForClutchShot, NodeType=Sequence, Child[0]=SetTargetStack-ClutchShot, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-ClutchShot)

+Behaviors=(BehaviorName=TryKillClutch, NodeType=Sequence, Child[0]=IsAbilityAvailable-ClutchShot, Child[1]=SelectTargetForClutchShot, Child[2]=SelectAbility-ClutchShot)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_Clutch, NodeType=Sequence, Child[0]=SetTargetStack-ClutchShot, Child[1]=EvaluateEnemyTargets_Clutch, Child[2]=HasValidTarget-ClutchShot)
+Behaviors=(BehaviorName=EvaluateEnemyTargets_Clutch, NodeType=RepeatUntilFail, Child[0]=EvaluateKillShotEnemies_Clutch)
+Behaviors=(BehaviorName=EvaluateKillShotEnemies_Clutch, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreKillShotEnemy_Clutch, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreKillShotEnemy_Clutch, NodeType=Successor, Child[0]=ScoreKillShotEnemy_Clutch)
+Behaviors=(BehaviorName=ScoreKillShotEnemy_Clutch, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=TargetIsEnemy, Child[2]=TargetHitChanceNotLow, Child[3]=TargetNotBound, Child[4]=TargetNotSacrificeProtected, Child[5]=GenericTargetEvaluations)
;


+Behaviors=(BehaviorName=SelectAbility-PistolStandardShot, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-PistolStandardShot, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-PistolStandardShot, NodeType=Condition)

+Behaviors=(BehaviorName=IsAbilityAvailable-PistolStandardShot, NodeType=Condition)

;KillZone
+Behaviors=(BehaviorName=TryKillZone, NodeType=Sequence, Child[0]=IsAbilityAvailable-KillZone, Child[1]=FindPotentialAoETargets-KillZoneProfile, Child[2]=SelectAoETarget-KillZoneProfile, Child[3]=SelectAbility-KillZone)

+Behaviors=(BehaviorName=FindPotentialAoETargets-KillZoneProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-KillZoneProfile, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-KillZone, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-KillZone, NodeType=Action)
; + RUN AWAY
+Behaviors=(BehaviorName=TryDarkEscape, NodeType=Sequence, Child[0]=IsAbilityAvailable-RM_DarkEvac, Child[1]=ShouldRequestEvac, Child[2]=SelectAbility-RM_DarkEvac)
+Behaviors=(BehaviorName=ShouldRequestEvac, NodeType=DarkXCOMCondition)
+Behaviors=(BehaviorName=IsAbilityAvailable-RM_DarkEvac, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RM_DarkEvac, NodeType=Action)

; Bleedout/Overwatch move cancel behaviour: hopefully stops the lockups

+Behaviors=(BehaviorName=AffectedByEffect-BleedingOut, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Unconscious, NodeType=Condition)

+Behaviors=(BehaviorName=BleedOutPass, NodeType=Selector, \\
	Child[0]=TrySkipTurnForBleedOut, \\
	Child[1]=TrySkipTurnForUnconscious)

+Behaviors=(BehaviorName="TrySkipTurnForBleedOut", NodeType=Sequence, Child[0]=AffectedByEffect-BleedingOut, Child[1]=SkipMove)
+Behaviors=(BehaviorName="TrySkipTurnForUnconscious", NodeType=Sequence, Child[0]=AffectedByEffect-Unconscious, Child[1]=SkipMove)

; MOCX SOLDIER BEHAVIOURS
+Behaviors=(BehaviorName="DarkSoldierRoot", NodeType=Selector, Child[0]=BleedOutPass, Child[1]=TryJob, Child[2]=GenericGreenMovement, Child[3]=AdvTrooper_RedAlert, Child[4]=GenericAlertHandler, Child[5]=SkipMove)

+Behaviors=(BehaviorName="DarkGrenadierRoot", NodeType=Selector, Child[0]=BleedOutPass, Child[1]=TryJob,  Child[2]=GenericGreenMovement, Child[3]=GrenadierBehavior, Child[4]=AdvTrooper_RedAlert, Child[5]=GenericAlertHandler, Child[6]=SkipMove)
+Behaviors=(BehaviorName="DarkRangerRoot", NodeType=Selector, Child[0]=BleedOutPass, Child[1]=TryJob, Child[2]=GenericGreenMovement,  Child[3]=RangerBehavior, Child[4]=AdvTrooper_RedAlert, Child[5]=GenericAlertHandler, Child[6]=SkipMove)
+Behaviors=(BehaviorName="DarkSniperRoot", NodeType=Selector, Child[0]=BleedOutPass, Child[1]=TryJob,  Child[2]=GenericGreenMovement, Child[3]=SniperBehavior, Child[4]=AdvTrooper_RedAlert, Child[5]=GenericAlertHandler, Child[6]=SkipMove)
+Behaviors=(BehaviorName="DarkSpecialistRoot", NodeType=Selector, Child[0]=BleedOutPass, Child[1]=TryJob, Child[2]=GenericGreenMovement, Child[3]=SpecialistBehavior, Child[4]=AdvTrooper_RedAlert, Child[5]=GenericAlertHandler, Child[6]=SkipMove)
+Behaviors=(BehaviorName="DarkPsiAgentRoot", NodeType=Selector, Child[0]=BleedOutPass, Child[1]=TryJob, Child[2]=GenericGreenMovement, Child[3]=PsiAgentBehavior, Child[4]=PriestRedOrangeAlert, Child[5]=GenericAlertHandler, Child[6]=SkipMove)

+Behaviors=(BehaviorName="DarkReclaimedRoot", NodeType=Selector, Child[0]=BleedOutPass, Child[1]=TryJob, Child[2]=GenericGreenMovement, Child[3]=Reclaimed_RedAlert, Child[4]=GenericAlertHandler, Child[5]=SkipMove)

+Behaviors=(BehaviorName=TrySkirmGrapple, NodeType=Sequence, Child[0]=IsAbilityAvailable-SkirmisherGrapple, Child[1]=FindSkirmGrappleDestination, Child[2]=SelectAbility-SkirmisherGrapple)
+Behaviors=(BehaviorName=FindSkirmGrappleDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-SkirmisherGrapple, Child[2]=OverridePreferredDestinationToSpawnLocation, Child[3]=RestrictToEnemyLoS, Child[4]=UseDashMovement, Child[5]=FindRestrictedDestination-MWP_GrappleOffense)
+Behaviors=(BehaviorName=RestrictToAbilityRange-SkirmisherGrapple, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-MWP_GrappleOffense, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-SkirmisherGrapple, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SkirmisherGrapple, NodeType=Action, param[0]=UseDestination)
;
;GRENADIER BEHAVIOUR
;
+Behaviors=(BehaviorName=GrenadierBehavior, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Grenadier_RedAbilitySelector)
+Behaviors=(BehaviorName=Grenadier_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Grenadier_RedFirstAction, Child[2]=Grenadier_RedLastAction)
+Behaviors=(BehaviorName=Grenadier_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Grenadier_RedFirstActionSelector)
+Behaviors=(BehaviorName=Grenadier_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryDarkEscape,	Child[2]=TryExplosive_prio,      Child[3]=TrySalvoGrenade,  Child[4]=TryExplosive_aggro,    Child[5]=TryMoveThenGrenade,    Child[6]=TrySpecialShots_Grenadier, Child[7]=TryShootOrReloadOrOverwatch_Adv,      Child[8]=MoveAggressive,      Child[9]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=Grenadier_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Grenadier_RedLastActionSelector)
+Behaviors=(BehaviorName=Grenadier_RedLastActionSelector, NodeType=Selector,      Child[0]=TryDarkEscape,  Child[1]=TryExplosive_prio,     Child[2]=TakePriorityShots,           Child[3]=TryExplosive_norm,         Child[4]=ShootPriorityTargets,   Child[5]=TrySpecialShots_Grenadier,  Child[6]=TrySuppressClosest, Child[7]=TryShootOrReloadOrOverwatch_Adv,     Child[8]=HuntEnemyWithCover,      Child[9]=MoveAggressive)

+Behaviors=(BehaviorName=TrySalvoGrenade, NodeType=Sequence, Child[0]=AffectedByEffect-Salvo, Child[1]=TryGrenadeLauncher_norm)

+Behaviors=(BehaviorName=AffectedByEffect-Salvo, NodeType=Condition)

;special shots: saturation fire, rupture, chain shot, etc
+Behaviors=(BehaviorName=TrySpecialShots_Grenadier, NodeType=Selector, Child[0]=TryRupture, Child[1]=TrySaturationFire, Child[2]=TryChainShot_ABA, Child[3]=TryBulletHail, Child[4]=TryDemolition)

;SaturationFire
+Behaviors=(BehaviorName=TrySaturationFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-SaturationFire, Child[1]=FindPotentialAoETargets-SaturationFireProfile, Child[2]=SelectAoETarget-SaturationFireProfile, Child[3]=SelectAbility-SaturationFire)

+Behaviors=(BehaviorName=FindPotentialAoETargets-SaturationFireProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-SaturationFireProfile, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-SaturationFire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SaturationFire, NodeType=Action)


+Behaviors=(BehaviorName=TryBulletHail, NodeType=Sequence, Child[0]=IsAbilityAvailable-HailOfBullets, Child[1]=SelectTargetForBulletHail, Child[2]=SelectAbility-HailOfBullets) 
+Behaviors=(BehaviorName=SelectTargetForBulletHail, NodeType=Sequence, Child[0]=SetTargetStack-HailOfBullets, Child[1]=SelectTarget_FavorableNonLostCivilianOrVIP, Child[2]=HasValidTarget-HailOfBullets) 

+Behaviors=(BehaviorName=SelectAbility-HailOfBullets, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-HailOfBullets, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-HailOfBullets, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-HailOfBullets, NodeType=Condition)

;RANGER BEHAVIOUR
;
;
+Behaviors=(BehaviorName=RangerBehavior, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Ranger_RedAbilitySelector)
+Behaviors=(BehaviorName=Ranger_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=Ranger_RedFirstAction, Child[2]=Ranger_RedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=Ranger_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Ranger_RedFirstActionSelector)
+Behaviors=(BehaviorName=Ranger_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryReaper, \\
	Child[1]=TryReaperMelee, \\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=TryDarkEscape, \\
	Child[4]=TryRaGDash, \\
	Child[5]=TryHighPriorityShot, \\
	Child[6]=TryVanish, \\
	Child[7]=TryRunAndGun, \\
	Child[8]=TryMoveThenGrenade, \\
	Child[9]=TryShootOrReloadOrOverwatch_Adv, \\
	Child[10]=TryRupture, \\
	Child[11]=TryRapidFire, \\
	Child[12]=TryRapidFire, \\
	Child[13]=SelectMoveProfileByJob, \\
	Child[14]=HuntEnemyWithCover)


+Behaviors=(BehaviorName=Ranger_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Ranger_RedLastActionSelector)
+Behaviors=(BehaviorName=Ranger_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryDarkEscape, \\
	Child[1]=TryReaperMelee, \\
	Child[2]=TryHighPriorityShot, \\
	Child[3]=TryGrenade, \\
	Child[4]=TryRupture, \\
	Child[5]=TryRapidFire, \\
	Child[6]=TryStandardMelee, \\
	Child[7]=TryShootOrReloadOrOverwatch_Adv, \\
	Child[8]=HuntEnemyWithCover, \\
	Child[9]=SelectMove_JobOrAggressive) 

+Behaviors=(BehaviorName=TryRapidFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-RapidFire, Child[1]=SelectTargetForRapidFire, Child[2]=SelectAbility-RapidFire) 
+Behaviors=(BehaviorName=SelectTargetForRapidFire, NodeType=Sequence, Child[0]=SetTargetStack-RapidFire, Child[1]=SelectTarget_FavorableNonLostCivilianOrVIP, Child[2]=HasValidTarget-RapidFire) 

+Behaviors=(BehaviorName=SelectAbility-RapidFire, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-RapidFire, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-RapidFire, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-RapidFire, NodeType=Condition)


+Behaviors=(BehaviorName=TryRupture, NodeType=Sequence, Child[0]=IsAbilityAvailable-BulletShred, Child[1]=SelectTargetForBulletShred, Child[2]=SelectAbility-BulletShred) 
+Behaviors=(BehaviorName=SelectTargetForBulletShred, NodeType=Sequence, Child[0]=SetTargetStack-BulletShred, Child[1]=SelectTarget_FavorableNonLostCivilianOrVIP, Child[2]=HasValidTarget-BulletShred) 

+Behaviors=(BehaviorName=SelectAbility-BulletShred, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-BulletShred, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-BulletShred, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-BulletShred, NodeType=Condition)

;SPECIALIST BEHAVIOUR
;
;
+Behaviors=(BehaviorName=SpecialistBehavior, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=HT_Spec_RedAbilitySelector) 
+Behaviors=(BehaviorName=HT_Spec_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=HT_Spec_RedFirstAction, Child[2]=HT_Spec_RedLastAction) 
+Behaviors=(BehaviorName=HT_Spec_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=HT_Spec_RedFirstActionSelector) 
+Behaviors=(BehaviorName=HT_Spec_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=HT_Spec_RedLastActionSelector) 

+Behaviors=(BehaviorName=HT_Spec_RedFirstActionSelector, NodeType=Selector, Child[0]=DoIfFlankedMove_Stayback,  Child[1]=TryDarkEscape, Child[2]=HT_TryGremlinHeal, Child[3]=TryAidProtocol, Child[4]=TryGremlinStabilize, Child[5]=TryRevivalProtocol, Child[6]=TryShootOrReloadOrOverwatch, Child[7]=MoveDefensive) 

+Behaviors=(BehaviorName=HT_Spec_RedLastActionSelector, NodeType=Selector,  Child[0]=TryDarkEscape, Child[1]=HT_TryGremlinHeal, Child[2]=TryCombatProtocol, Child[3]=TryRestoreOrDischarge,  Child[4]=TryAidProtocol, Child[5]=OverwatchOverride50, Child[6]=TryShootOrReloadOrOverwatch, Child[7]=TryRevivalProtocol, Child[8]=MoveDefensive) 
+Behaviors=(BehaviorName=HT_OverwatchOverride50, NodeType=Sequence, Child[0]=AllShotPercentagesBelow50, Child[1]=TryOverwatch) 

+Behaviors=(BehaviorName=TryCombatProtocol, NodeType=Sequence, Child[0]=IsAbilityAvailable-CombatProtocol, Child[1]=SelectTargetForCombatProtocol, Child[2]=SelectAbility-CombatProtocol)
+Behaviors=(BehaviorName=SelectTargetForCombatProtocol, NodeType=Sequence, Child[0]=SetTargetStack-CombatProtocol, Child[1]=SelectTarget_FavorableNonLostCivilianOrVIP, Child[2]=HasValidTarget-CombatProtocol) 

+Behaviors=(BehaviorName=SelectAbility-CombatProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-CombatProtocol, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-CombatProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-CombatProtocol, NodeType=Condition)

;restoration or discharge

+Behaviors=(BehaviorName=TryRestoreOrDischarge, NodeType=Selector, Child[0]=TryRestoration, Child[1]=TryDischarge)

+Behaviors=(BehaviorName=TryRestoration, NodeType=Sequence, Child[0]=IsAbilityAvailable-RestorativeMist, Child[1]=SelectTargetForAidProtocol, Child[2]=SelectAbility-RestorativeMist)

+Behaviors=(BehaviorName=TryDischarge, NodeType=Sequence, Child[0]=IsAbilityAvailable-CapacitorDischarge, Child[1]=FindPotentialAoETargets-CapacitorDischargeAOE, Child[2]=SelectAoETarget-CapacitorDischargeAOE, Child[3]=SelectAbility-CapacitorDischarge)

+Behaviors=(BehaviorName=FindPotentialAoETargets-CapacitorDischargeAOE, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-CapacitorDischargeAOE, NodeType=Action)

+Behaviors=(BehaviorName=SelectAbility-CapacitorDischarge, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-CapacitorDischarge, NodeType=Condition)

+Behaviors=(BehaviorName=SelectAbility-RestorativeMist, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-RestorativeMist, NodeType=Condition)

; + Aid Protocol
+Behaviors=(BehaviorName=SelectAbility-AidProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AidProtocol, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-AidProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-AidProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForAidProtocol, NodeType=Sequence, Child[0]=SetTargetStack-AidProtocol, Child[1]=SelectTargetForAid, Child[2]=HasValidTarget-AidProtocol)
+Behaviors=(BehaviorName=SelectTargetForAid, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForAid, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForAid, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=EvaluateForAid)
+Behaviors=(BehaviorName=EvaluateForAid, NodeType=Sequence, Child[0]=ScoreByHP)
+Behaviors=(BehaviorName=TryAidProtocol, NodeType=Sequence, Child[0]=IsAbilityAvailable-AidProtocol, Child[1]=SelectTargetForAidProtocol, Child[2]=SelectAbility-AidProtocol)

; + Revival Protocol
+Behaviors=(BehaviorName=TargetAffectedByEffect-Stunned, NodeType=Condition)
+Behaviors=(BehaviorName=TargetIsImpaired, NodeType=Selector, Child[0]=TargetAffectedByEffect-Stunned, Child[1]=TargetAffectedByEffect-Panicked, Child[2]=TargetAffectedByEffect-Disoriented)
+Behaviors=(BehaviorName=SelectAbility-RevivalProtocol, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-RevivalProtocol, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-RevivalProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-RevivalProtocol, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForRevivalProtocol, NodeType=Sequence, Child[0]=SetTargetStack-RevivalProtocol, Child[1]=SelectTargetForRevival, Child[2]=HasValidTarget-RevivalProtocol)
+Behaviors=(BehaviorName=SelectTargetForRevival, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForRevival, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForRevival, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetIsImpaired, Child[2]=EvaluateForRevival)
+Behaviors=(BehaviorName=EvaluateForRevival, NodeType=Sequence, Child[0]=ScoreByHP)
+Behaviors=(BehaviorName=TryRevivalProtocol, NodeType=Sequence, Child[0]=IsAbilityAvailable-RevivalProtocol, Child[1]=SelectTargetForRevivalProtocol, Child[2]=SelectAbility-RevivalProtocol)

; + Stabilize Protocol
+Behaviors=(BehaviorName=TargetAffectedByEffect-BleedingOut, NodeType=Condition)
+Behaviors=(BehaviorName=TargetIsBleedingOut, NodeType=Sequence, Child[0]=TargetAffectedByEffect-BleedingOut)
+Behaviors=(BehaviorName=SelectAbility-GremlinStabilize, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-GremlinStabilize, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-GremlinStabilize, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-GremlinStabilize, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForGremlinStabilize, NodeType=Sequence, Child[0]=SetTargetStack-GremlinStabilize, Child[1]=SelectTargetForStabilize, Child[2]=HasValidTarget-GremlinStabilize)
+Behaviors=(BehaviorName=SelectTargetForStabilize, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForRevival, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForStabilize, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetIsBleedingOut, Child[2]=EvaluateForRevival)
+Behaviors=(BehaviorName=TryGremlinStabilize, NodeType=Sequence, Child[0]=IsAbilityAvailable-GremlinStabilize, Child[1]=SelectTargetForGremlinStabilize, Child[2]=SelectAbility-GremlinStabilize)




; Gremlin heal definition
+Behaviors=(BehaviorName=HT_TryGremlinHeal, NodeType=Sequence, Child[0]=IsAbilityAvailable-GremlinHeal, Child[1]=HT_SelectTargetForGremlinHeal, Child[2]=SelectAbility-GremlinHeal)
+Behaviors=(BehaviorName=HT_SelectTargetForGremlinHeal, NodeType=Sequence, Child[0]=SetTargetStack-GremlinHeal, Child[1]=HT_SelectTargetForHeal, Child[2]=HasValidTarget-GremlinHeal)
+Behaviors=(BehaviorName=HT_SelectTargetForHeal, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=HT_ScoreBestTargetForHeal, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=HT_ScoreBestTargetForHeal, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=HT_EvaluateForHeal)
+Behaviors=(BehaviorName=HT_EvaluateForHeal, NodeType=Sequence, Child[0]=ScoreByHP)
+Behaviors=(BehaviorName=IsAbilityAvailable-GremlinHeal, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-GremlinHeal, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-GremlinHeal, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-GremlinHeal, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-GremlinHeal, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-GremlinHeal, NodeType=Condition)

;SHARPSHOOTER BEHAVIOUR
;
;


+Behaviors=(BehaviorName=SniperBehavior, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=HT_Sharp_RedAbilitySelector)
+Behaviors=(BehaviorName=HT_Sharp_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=HT_Sharp_RedFirstAction, Child[2]=HT_Sharp_RedLastAction)

+Behaviors=(BehaviorName=HT_Sharp_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=HT_Sharp_RedFirstActionSelector)
+Behaviors=(BehaviorName=HT_Sharp_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMoveHeightPref, \\
	Child[1]=TryDarkEscape, \\
	Child[2]=TrySerial, \\
	Child[3]=TryHighPriorityShot_Sniper, \\
	Child[4]=TryLightningHands, \\
	Child[5]=TrySpecialShots, \\
	Child[6]=HT_TryShootOrReloadOrOverwatch_Sniper,  \\
	Child[7]=TryMoveThenGrenade, \\
	Child[8]=PistolIfAvailable, \\
	Child[9]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=HT_Sharp_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=HT_Sharp_RedLastActionSelector)
+Behaviors=(BehaviorName=HT_Sharp_RedLastActionSelector, NodeType=Selector,  Child[0]=TryDarkEscape, Child[1]=TryGrenade, Child[2]=HT_TryShootOrReloadOrHunker_Sniper, Child[3]=TrySpecialShots, Child[4]=PistolIfAvailable, Child[5]=GenericAbilityRoot, Child[6]=HuntEnemyWithCover)

; Sniper specific
+Behaviors=(BehaviorName=HT_TryShootOrReloadOrOverwatch_Sniper, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=HT_ShootIfAvailable_Sniper, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=HT_TryShootOrReloadOrHunker_Sniper, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=HT_ShootIfAvailable_Sniper, Child[2]=HunkerWhenDisoriented, Child[3]=NeedsReload)
+Behaviors=(BehaviorName=HT_ShootIfAvailable_Sniper, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperStandardFire, Child[1]=HT_SelectTargetForSniperStandardFire, Child[2]=SelectAbility-SniperStandardFire) 
+Behaviors=(BehaviorName=HT_SelectTargetForSniperStandardFire, NodeType=Sequence, Child[0]=SetTargetStack-SniperStandardFire, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-SniperStandardFire)
+Behaviors=(BehaviorName=IsAbilityAvailable-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SniperStandardFire, NodeType=Action) 
+Behaviors=(BehaviorName=SetTargetStack-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-SniperStandardFire, NodeType=Condition)

+Behaviors=(BehaviorName=PistolIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectTargetForPistol, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectTargetForPistol, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-PistolStandardShot)

; Serial
+Behaviors=(BehaviorName=TrySerial, NodeType=Sequence, Child[0]=IsAbilityAvailable-InTheZone, Child[1]=HaveHighPriorityTarget_Sniper, Child[2]=SelectAbility-InTheZone)
+Behaviors=(BehaviorName=IsAbilityAvailable-InTheZone, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-InTheZone, NodeType=Action)

;special shots, killzone, deadeye, fanfire, faceoff, etc.
+Behaviors=(BehaviorName=TrySpecialShots, NodeType=Selector, Child[0]=TryKillZone, Child[1]=TryDeadeye, Child[2]=HT_TryFanfire, Child[3]=TryFaceoff)

+Behaviors=(BehaviorName=TryDeadeye, NodeType=Sequence, Child[0]=IsAbilityAvailable-Deadeye, Child[1]=SelectTargetForDeadeye, Child[2]=SelectAbility-Deadeye) 
+Behaviors=(BehaviorName=SelectTargetForDeadeye, NodeType=Sequence, Child[0]=SetTargetStack-Deadeye, Child[1]=SelectTarget_FavorableNonLostCivilianOrVIP, Child[2]=HasValidTarget-Deadeye) 

+Behaviors=(BehaviorName=SelectAbility-Deadeye, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Deadeye, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-Deadeye, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-Deadeye, NodeType=Condition)

;psi agent
+Behaviors=(BehaviorName=PsiAgentBehavior, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=PsiAgent_RedAbilitySelector)
+Behaviors=(BehaviorName=PsiAgent_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=PsiAgent_RedFirstAction, Child[2]=PsiAgent_RedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=PsiAgent_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=PsiAgent_RedFirstActionSelector)
+Behaviors=(BehaviorName=PsiAgent_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryDarkEscape, \\
	Child[2]=TakePriorityShots, \\
	Child[3]=TryStasis, \\
	Child[4]=TryHolyWarrior, \\
	Child[5]=TryPsiMindControl, \\
	Child[6]=TryFuse, \\
	Child[7]=TryNullLance, \\
	Child[8]=TryVoidRift, \\
	Child[9]=TrySoulfire, \\
	Child[10]=TryShootOrReloadOrOverwatch_Adv, \\
	Child[11]=SelectMoveProfileByJob, \\
	Child[12]=HuntEnemyWithCover)


+Behaviors=(BehaviorName=PsiAgent_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=PsiAgent_RedLastActionSelector)
+Behaviors=(BehaviorName=PsiAgent_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryDarkEscape, \\
	Child[1]=TryStasis, \\
	Child[2]=TryHolyWarrior, \\
	Child[3]=TryPsiMindControl, \\
	Child[4]=TryFuse, \\
	Child[5]=TryNullLance, \\
	Child[6]=TryVoidRift, \\
	Child[7]=TrySoulfire, \\
	Child[8]=TryInspire, \\
	Child[9]=TryShootOrReloadOrOverwatch_Adv, \\
	Child[10]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=IsAbilityReady-VoidRift, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-VoidRift, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-VoidRift, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-VoidRiftProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-VoidRiftProfile, NodeType=Action)

;void rift
+Behaviors=(BehaviorName=TryVoidRift, NodeType=Sequence, Child[0]=IsAbilityAvailable-VoidRift, Child[1]=FindPotentialAoETargets-VoidRiftProfile, Child[2]=SelectAoETarget-VoidRiftProfile, Child[3]=SelectAbility-VoidRift)



;soulfire
+Behaviors=(BehaviorName=TrySoulfire, NodeType=Sequence, Child[0]=IsAbilityAvailable-Soulfire, Child[1]=NotLastEnemy, Child[2]=SelectTargetForSoulfire, Child[3]=SelectAbility-Soulfire) 
+Behaviors=(BehaviorName=NotLastEnemy, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-Soulfire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForSoulfire, NodeType=Sequence, Child[0]=SetTargetStack-Soulfire, Child[1]=IterateTargetsForSoulfire, Child[2]=HasValidTarget-Soulfire)
+Behaviors=(BehaviorName=SetTargetStack-Soulfire, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForSoulfire, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForSoulfire)
+Behaviors=(BehaviorName=IterateNextTargetForSoulfire, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForSoulfire, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForSoulfire, NodeType=Successor, Child[0]=EvaluateForSoulfire)
+Behaviors=(BehaviorName=EvaluateForSoulfire, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_100, Child[8]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-Soulfire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Soulfire, NodeType=Action)
+Behaviors=(BehaviorName=TargetNotTeamTheLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)

;fuse
+Behaviors=(BehaviorName=TryFuse, NodeType=Sequence, Child[0]=IsAbilityAvailable-Fuse, Child[1]=NotLastEnemy, Child[2]=SelectTargetForFuse, Child[3]=SelectAbility-Fuse) 
+Behaviors=(BehaviorName=IsAbilityAvailable-Fuse, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForFuse, NodeType=Sequence, Child[0]=SetTargetStack-Fuse, Child[1]=IterateTargetsForFuse, Child[2]=HasValidTarget-Fuse)
+Behaviors=(BehaviorName=SetTargetStack-Fuse, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForFuse, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForFuse)
+Behaviors=(BehaviorName=IterateNextTargetForFuse, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForFuse, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForFuse, NodeType=Successor, Child[0]=EvaluateForFuse)
+Behaviors=(BehaviorName=EvaluateForFuse, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_100, Child[8]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-Fuse, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Fuse, NodeType=Action)

;inspire
+Behaviors=(BehaviorName=TryInspire, NodeType=Sequence, Child[0]=IsAbilityAvailable-Inspire, Child[1]=SelectTargetForInspire, Child[2]=SelectAbility-Inspire) 
+Behaviors=(BehaviorName=IsAbilityAvailable-Inspire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForInspire, NodeType=Sequence, Child[0]=SetTargetStack-Inspire, Child[1]=IterateTargetsForInspire, Child[2]=HasValidTarget-Inspire)
+Behaviors=(BehaviorName=SetTargetStack-Inspire, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForInspire, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForInspire)
+Behaviors=(BehaviorName=IterateNextTargetForInspire, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForInspire, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForInspire, NodeType=Successor, Child[0]=EvaluateForInspire)
+Behaviors=(BehaviorName=EvaluateForInspire, NodeType=Sequence, Child[0]=HasActionPoints, Child[1]=TargetScoreByVisibleXComDist-1, Child[2]=ScoreIfTarget_MaxHP, Child[3]=ScoreByHP)
+Behaviors=(BehaviorName=HasValidTarget-Inspire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Inspire, NodeType=Action)
+Behaviors=(BehaviorName=HasActionPoints, NodeType=StatCondition, Param[0]=ActionPoints, Param[1]=">", Param[2]=0)


+Behaviors=(BehaviorName=Reclaimed_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Reclaimed_RedAbilitySelector)
+Behaviors=(BehaviorName=Reclaimed_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ReclaimedRedFirstAction, Child[2]=ReclaimedRedLastAction)

+Behaviors=(BehaviorName=ReclaimedRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ReclaimedRedFirstActionSelector)
+Behaviors=(BehaviorName=ReclaimedRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TrySkirmGrapple, \\
	Child[1]=DoIfFlankedMoveHeightPref, \\
	Child[2]=TryDarkEscape, \\
	Child[3]=TryCombatPresence, \\
	Child[4]=TryOverride, \\
	Child[5]=TryGrenade, \\
	Child[6]=TryWhiplash, \\
	Child[7]=TryJustice, \\
	Child[8]=TryStandardMelee, \\
	Child[9]=TryWrath, \\
	Child[10]=TryMoveThenGrenadeAny, \\
	Child[11]=TryShootOrReloadOrOverwatch_ABA, \\
	Child[12]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=ReclaimedRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ReclaimedRedLastActionSelector)
+Behaviors=(BehaviorName=ReclaimedRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryDarkEscape, \\
	Child[1]=TryGrenade, \\
	Child[2]=TryWhiplash, \\
	Child[3]=TryJustice, \\
	Child[4]=TryGrenadeAny, \\
	Child[5]=TryShootOrReloadOrOverwatch_ABA, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=SelectMove_JobOrAggressive)


;Reckoning


;Whiplash
+Behaviors=(BehaviorName=TryWhiplash, NodeType=Sequence, Child[0]=IsAbilityAvailable-Whiplash, Child[1]=SelectTargetForWhiplash, Child[2]=SelectAbility-Whiplash) 
+Behaviors=(BehaviorName=IsAbilityAvailable-Whiplash, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForWhiplash, NodeType=Sequence, Child[0]=SetTargetStack-Whiplash, Child[1]=IterateTargetsForWhiplash, Child[2]=HasValidTarget-Whiplash)
+Behaviors=(BehaviorName=SetTargetStack-Whiplash, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForWhiplash, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForWhiplash)
+Behaviors=(BehaviorName=IterateNextTargetForWhiplash, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForWhiplash, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForWhiplash, NodeType=Successor, Child[0]=EvaluateForWhiplash)
+Behaviors=(BehaviorName=EvaluateForWhiplash, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_100, Child[8]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-Whiplash, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Whiplash, NodeType=Action)
+Behaviors=(BehaviorName=TargetNotTeamTheLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)


;Justice
+Behaviors=(BehaviorName=TryJustice, NodeType=Sequence, Child[0]=IsAbilityAvailable-Justice, Child[1]=SelectTargetForJustice, Child[2]=SelectAbility-Justice) 
+Behaviors=(BehaviorName=IsAbilityAvailable-Justice, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForJustice, NodeType=Sequence, Child[0]=SetTargetStack-Justice, Child[1]=IterateTargetsForJustice, Child[2]=HasValidTarget-Justice)
+Behaviors=(BehaviorName=SetTargetStack-Justice, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForJustice, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForJustice)
+Behaviors=(BehaviorName=IterateNextTargetForJustice, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForJustice, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForJustice, NodeType=Successor, Child[0]=EvaluateForJustice)
+Behaviors=(BehaviorName=EvaluateForJustice, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_100, Child[8]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-Justice, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Justice, NodeType=Action)
+Behaviors=(BehaviorName=TargetNotTeamTheLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)


;Wrath
+Behaviors=(BehaviorName=TryWrath, NodeType=Sequence, Child[0]=IsAbilityAvailable-SkirmisherVengeance, Child[1]=SelectTargetForSkirmisherVengeance, Child[2]=SelectAbility-SkirmisherVengeance) 
+Behaviors=(BehaviorName=IsAbilityAvailable-SkirmisherVengeance, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForSkirmisherVengeance, NodeType=Sequence, Child[0]=SetTargetStack-SkirmisherVengeance, Child[1]=IterateTargetsForSkirmisherVengeance, Child[2]=HasValidTarget-SkirmisherVengeance)
+Behaviors=(BehaviorName=SetTargetStack-SkirmisherVengeance, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForSkirmisherVengeance, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForSkirmisherVengeance)
+Behaviors=(BehaviorName=IterateNextTargetForSkirmisherVengeance, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForSkirmisherVengeance, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForSkirmisherVengeance, NodeType=Successor, Child[0]=EvaluateForSkirmisherVengeance)
+Behaviors=(BehaviorName=EvaluateForSkirmisherVengeance, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_100, Child[8]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-SkirmisherVengeance, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SkirmisherVengeance, NodeType=Action)
+Behaviors=(BehaviorName=TargetNotTeamTheLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)

; Combat Presence
+Behaviors=(BehaviorName=SelectAbility-CombatPresence, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-CombatPresence, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-CombatPresence, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-CombatPresence, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForCombatPresence, NodeType=Sequence, Child[0]=SetTargetStack-CombatPresence, Child[1]=SelectTargetForAid, Child[2]=HasValidTarget-CombatPresence)
+Behaviors=(BehaviorName=SelectTargetForAid, NodeType=Sequence,  Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForAid, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForAid, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetWounded, Child[2]=EvaluateForAid)
+Behaviors=(BehaviorName=EvaluateForAid, NodeType=Sequence, Child[0]=ScoreByHP)
+Behaviors=(BehaviorName=TryCombatPresence, NodeType=Sequence, Child[0]=IsAbilityAvailable-CombatPresence, Child[1]=SelectTargetForCombatPresence, Child[2]=SelectAbility-CombatPresence)

;Manual Override
;only way to reliably check is justice only: wrath, whiplash when modded, etc can not be there and thus always make this valid
+Behaviors=(BehaviorName=NoJustice, NodeType=Inverter, Child[0]=IsAbilityReady-Justice)
+Behaviors=(BehaviorName=IsAbilityReady-Justice, NodeType=Condition)
+Behaviors=(BehaviorName=HasCooldowns, NodeType=Selector, Child[0]=NoJustice) 
+Behaviors=(BehaviorName=TryOverride, NodeType=Sequence, Child[0]=IsAbilityAvailable-ManualOverride,  Child[1]=HasCooldowns, Child[2]=SelectAbility-ManualOverride)
+Behaviors=(BehaviorName=IsAbilityAvailable-ManualOverride, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ManualOverride, NodeType=Action)